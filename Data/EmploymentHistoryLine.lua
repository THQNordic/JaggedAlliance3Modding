-- ========== GENERATED BY EmploymentHistoryLine Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local operation = SectorOperations[context.operationId or context.activityId]
		if not operation then return end 
		local ctx = {display_name = operation.display_name}
		for k,v in pairs(context) do ctx[k] = v end
		local text = T{self.text, ctx}
		
		if operation.Professions and #operation.Professions > 1 then
			local profession = table.find_value(operation.Professions, "id", context.professionId)
			local professionName = profession and profession.display_name
			if professionName then
				text = text .. T{610593192512, " as a <professionName>", professionName = professionName}
			end
		end
		
		if ctx.sectorId then
			text = text .. T{905957213338, " in <em><SectorName(sectorId)></em>", ctx}
		end
		
		return text
	end,
	group = "Activities",
	id = "ActivityFinished",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "OperationChanged",
			Handler = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving" and not interrupted then
					local context = { operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
			HandlerCode = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving" and not interrupted then
					local context = { operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
		}),
	},
	text = T(438419945982, --[[EmploymentHistoryLine ActivityFinished text]] "Day <day> - Finished <em><display_name></em> operation"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local operation = SectorOperations[context.operationId]
		if not operation then return end 
		local ctx = {display_name = operation.display_name}
		for k,v in pairs(context) do ctx[k] = v end
		local text = T{self.text, ctx}
		
		if operation.Professions and #operation.Professions > 1 then
			local profession = table.find_value(operation.Professions, "id", context.professionId)
			local professionName = profession and profession.display_name
			if professionName then
				text = text .. T{610593192512, " as a <professionName>", professionName = professionName}
			end
		end
		
		if ctx.sectorId then
			text = text .. T{905957213338, " in <em><SectorName(sectorId)></em>", ctx}
		end
		
		return text
	end,
	group = "Activities",
	id = "ActivityInterrupted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "OperationChanged",
			Handler = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving"  and interrupted then
					local context = { operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
			HandlerCode = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving"  and interrupted then
					local context = { operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
		}),
	},
	text = T(300884974621, --[[EmploymentHistoryLine ActivityInterrupted text]] "Day <day> - Interrupted <em><display_name></em> operation"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local operation = SectorOperations[context.operationId]
		if not operation then return end 
		local ctx = {display_name = operation.display_name}
		for k,v in pairs(context) do ctx[k] = v end
		local text = T{self.text, ctx}
		
		if operation.Professions and #operation.Professions > 1 then
			local profession = table.find_value(operation.Professions, "id", context.professionId)
			local professionName = profession and profession.display_name
			if professionName then
				text = text .. T{610593192512, " as a <professionName>", professionName = professionName}
			end
		end
		
		if ctx.sectorId then
			text = text .. T{905957213338, " in <em><SectorName(sectorId)></em>", ctx}
		end
		
		return text
	end,
	group = "Activities",
	id = "ActivityStarted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "OperationChanged",
			Handler = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id and newOperation.id ~= "Idle" and newOperation.id ~= "Traveling" and newOperation.id ~= "Arriving" then
					local context = { operationId = newOperation.id, day = GetCampaignDay(), professionId = unit.OperationProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
			HandlerCode = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id and newOperation.id ~= "Idle" and newOperation.id ~= "Traveling" and newOperation.id ~= "Arriving" then
					local context = { operationId = newOperation.id, day = GetCampaignDay(), professionId = unit.OperationProfession, sectorId = gv_Squads[unit.Squad].CurrentSector }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
		}),
	},
	text = T(943898067009, --[[EmploymentHistoryLine ActivityStarted text]] "Day <day> - Started <em><display_name></em> operation"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Activities",
	id = "ArrivedActivity",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "OperationChanged",
			Handler = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id == "Arriving" and not interrupted then
					local context = { day = GetCampaignDay() }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
			HandlerCode = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id == "Arriving" and not interrupted then
					local context = { day = GetCampaignDay() }
					AddEmploymentHistoryLog(unit, self.id, context)
				end
			end,
		}),
	},
	text = T(736506824150, --[[EmploymentHistoryLine ArrivedActivity text]] "Day <day> - Arrived in Grand Chien"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local unit = gv_UnitData[context.mercId]
		local ctx = { mercName = unit and unit.Nick }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "BecomeDisliked",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "BecomeDisliked",
			Handler = function (self, unit, newDislike)
				local unit = gv_UnitData[unit]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), mercId = newDislike })
				end
			end,
			HandlerCode = function (self, unit, newDislike)
				local unit = gv_UnitData[unit]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), mercId = newDislike })
				end
			end,
		}),
	},
	text = T(901056728705, --[[EmploymentHistoryLine BecomeDisliked text]] "Day <day> - Started to dislike <em><mercName></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local unit = gv_UnitData[context.mercId]
		local ctx = { mercName = unit and unit.Nick }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "BecomeLiked",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "BecomeLiked",
			Handler = function (self, unit, newLike)
				local unit = gv_UnitData[unit]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), mercId = newLike })
				end
			end,
			HandlerCode = function (self, unit, newLike)
				local unit = gv_UnitData[unit]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), mercId = newLike })
				end
			end,
		}),
	},
	text = T(384650734062, --[[EmploymentHistoryLine BecomeLiked text]] "Day <day> - Started to like <em><mercName></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { taskName = CombatTaskDefs[context.taskId].name }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "CombatTaskCompleted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "CombatTaskFinished",
			Handler = function (self, taskId, unit, success)
				if success == true then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), taskId = taskId })
				end
			end,
			HandlerCode = function (self, taskId, unit, success)
				if success == true then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), taskId = taskId })
				end
			end,
		}),
	},
	text = T(145261145795, --[[EmploymentHistoryLine CombatTaskCompleted text]] "Day <day> - <em><taskName></em> combat task <em>completed</em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { taskName = CombatTaskDefs[context.taskId].name }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "CombatTaskFailed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "CombatTaskFinished",
			Handler = function (self, taskId, unit, success)
				if success == false then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), taskId = taskId })
				end
			end,
			HandlerCode = function (self, taskId, unit, success)
				if success == false then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), taskId = taskId })
				end
			end,
		}),
	},
	text = T(185316730686, --[[EmploymentHistoryLine CombatTaskFailed text]] "Day <day> - <em><taskName></em> combat task <em>failed</em>"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "ContractExpired",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercHireStatusChanged",
			Handler = function (self, unitData, oldStatus, newStatus)
				if oldStatus == "Hired" and newStatus == "Available" then
					AddEmploymentHistoryLog(unitData, self.id, { day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, unitData, oldStatus, newStatus)
				if oldStatus == "Hired" and newStatus == "Available" then
					AddEmploymentHistoryLog(unitData, self.id, { day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(206556951642, --[[EmploymentHistoryLine ContractExpired text]] "Day <day> - Contract expired"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "Downed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "UnitDowned",
			Handler = function (self, unit)
				if IsMerc(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, unit)
				if IsMerc(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(334686164186, --[[EmploymentHistoryLine Downed text]] "Day <day> - Downed in battle"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "Exhausted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Exhausted" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Exhausted" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(101811597932, --[[EmploymentHistoryLine Exhausted text]] "Day <day> - Became exhausted"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "ExhaustedRemoved",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Exhausted" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Exhausted" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(153091639820, --[[EmploymentHistoryLine ExhaustedRemoved text]] "Day <day> - Well rested"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { rehiredText = context.rehired and T(566799126642, "Rehired") or T(401216445387, "Hired") }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "Hired",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercHired",
			Handler = function (self, mercId, price, days, alreadyHired)
				local unit = gv_UnitData[mercId]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), days = days, rehired = alreadyHired })
				end
			end,
			HandlerCode = function (self, mercId, price, days, alreadyHired)
				local unit = gv_UnitData[mercId]
				if not IsImpUnit(unit) then
					AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), days = days, rehired = alreadyHired })
				end
			end,
		}),
	},
	text = T(323355315663, --[[EmploymentHistoryLine Hired text]] "Day <day> - <rehiredText> for <em><days></em> days"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "LevelUp",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "UnitLeveledUp",
			Handler = function (self, unit)
				if IsMerc(unit) then
					AddEmploymentHistoryLog(unit, self.id, {day = GetCampaignDay()})
				end
			end,
			HandlerCode = function (self, unit)
				if IsMerc(unit) then
					AddEmploymentHistoryLog(unit, self.id, {day = GetCampaignDay()})
				end
			end,
		}),
	},
	text = T(354668455194, --[[EmploymentHistoryLine LevelUp text]] "Day <day> - Leveled up"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { perkName = CharacterEffectDefs[context.perkId].DisplayName }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "PerkLearned",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "PerksLearned",
			Handler = function (self, unit, perkIds)
				for _, perkId in ipairs(perkIds) do
					AddEmploymentHistoryLog(unit, self.id, { perkId = perkId, day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, unit, perkIds)
				for _, perkId in ipairs(perkIds) do
					AddEmploymentHistoryLog(unit, self.id, { perkId = perkId, day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(571786525879, --[[EmploymentHistoryLine PerkLearned text]] "Day <day> - New perk: <em><perkName></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { questName = Quests[context.questId].DisplayName }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "QuestCompleted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "QuestParamChanged",
			Handler = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Completed" and newVal == true then
					for _, unit in pairs(gv_UnitData) do
						if IsMerc(unit) and unit.HireStatus == "Hired" then
							AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), questId = questId})
						end
					end
				end
			end,
			HandlerCode = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Completed" and newVal == true then
					for _, unit in pairs(gv_UnitData) do
						if IsMerc(unit) and unit.HireStatus == "Hired" then
							AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), questId = questId})
						end
					end
				end
			end,
		}),
	},
	text = T(457529073101, --[[EmploymentHistoryLine QuestCompleted text]] "Day <day> - Completed quest: <em><questName></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local ctx = { questName = Quests[context.questId].DisplayName }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "QuestFailed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "QuestParamChanged",
			Handler = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Failed" and newVal == true then
					for _, unit in pairs(gv_UnitData) do
						if IsMerc(unit) and unit.HireStatus == "Hired" then
							AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), questId = questId})
						end
					end
				end
			end,
			HandlerCode = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Failed" and newVal == true then
					for _, unit in pairs(gv_UnitData) do
						if IsMerc(unit) and unit.HireStatus == "Hired" then
							AddEmploymentHistoryLog(unit, self.id, { day = GetCampaignDay(), questId = questId})
						end
					end
				end
			end,
		}),
	},
	text = T(177842835715, --[[EmploymentHistoryLine QuestFailed text]] "Day <day> - Failed quest: <em><questName></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	Comment = "by player",
	GetText = function (self, context)
		local new_context = {day = context.day, sector = gv_Sectors[context.sector]}
		return T{self.text, new_context}
	end,
	group = "Default",
	id = "SectorAttackedAndLost",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if playerAttacking and not playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if playerAttacking and not playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
		}),
	},
	text = T(718106384892, --[[EmploymentHistoryLine SectorAttackedAndLost text]] "Day <day> - <em><SectorName(sector)></em> attacked but the battle was lost"),
})

PlaceObj('EmploymentHistoryLine', {
	Comment = "by player",
	GetText = function (self, context)
		local new_context = {day = context.day, sector = gv_Sectors[context.sector]}
		return T{self.text, new_context}
	end,
	group = "Default",
	id = "SectorAttackedAndWon",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if playerAttacking and playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if playerAttacking and playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
		}),
	},
	text = T(455749220627, --[[EmploymentHistoryLine SectorAttackedAndWon text]] "Day <day> - <em><SectorName(sector)></em> attacked and taken over"),
})

PlaceObj('EmploymentHistoryLine', {
	Comment = "by player",
	GetText = function (self, context)
		local new_context = {day = context.day, sector = gv_Sectors[context.sector]}
		return T{self.text, new_context}
	end,
	group = "Default",
	id = "SectorDefendedAndLost",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if not playerAttacking and not playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if not playerAttacking and not playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
		}),
	},
	text = T(492475142182, --[[EmploymentHistoryLine SectorDefendedAndLost text]] "Day <day> - <em><SectorName(sector)></em> lost"),
})

PlaceObj('EmploymentHistoryLine', {
	Comment = "by player",
	GetText = function (self, context)
		local new_context = {day = context.day, sector = gv_Sectors[context.sector]}
		return T{self.text, new_context}
	end,
	group = "Default",
	id = "SectorDefendedAndWon",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if not playerAttacking and playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon, isAutoResolve)
				if not playerAttacking and playerWon then
					local units = GetPlayerMercsInSector(sector.Id)
					for _, unitId in ipairs(units) do
						local unit = not gv_SatelliteView and g_Units[unitId] or gv_UnitData[unitId]
						AddEmploymentHistoryLog(unit, self.id, {sector = sector.Id, day = GetCampaignDay()})
					end
				end
			end,
		}),
	},
	text = T(178827082698, --[[EmploymentHistoryLine SectorDefendedAndWon text]] "Day <day> - <em><SectorName(sector)></em> defended successfully"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local statProp = table.find_value(UnitPropertiesStats:GetProperties(), "id", context.stat)
		local ctx = { statName = statProp.name }
		for k,v in pairs(context) do ctx[k] = v end
		
		local text = T{self.text, ctx}
		if context.reason then
			text = text .. T{115568324800, " through <em><reason></em>", reason = StatGainReason[context.reason] }
		end
		return text
	end,
	group = "Default",
	id = "StatIncreased",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "StatIncreased",
			Handler = function (self, obj, stat, amount, reason)
				if IsMerc(obj) then
					AddEmploymentHistoryLog(obj, self.id, { stat = stat, amount = amount, reason = reason, day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, obj, stat, amount, reason)
				if IsMerc(obj) then
					AddEmploymentHistoryLog(obj, self.id, { stat = stat, amount = amount, reason = reason, day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(585706136298, --[[EmploymentHistoryLine StatIncreased text]] "Day <day> - <em><statName></em> increased by <amount>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		if context.nameId then
			local ctx = table.copy(context)
			local name = T{context.nameId, TranslationTable[context.nameId]}
			ctx.villain = name
			return T{self.text, ctx}
		end
	end,
	group = "Default",
	id = "VillainDefeated",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "VillainDefeated",
			Handler = function (self, villain, attacker)
				if IsMerc(attacker) and not villain.villain_defeated  then
					AddEmploymentHistoryLog(attacker, self.id, { day = GetCampaignDay(), nameId = TGetID(villain.Name) })
				end
			end,
			HandlerCode = function (self, villain, attacker)
				if IsMerc(attacker) and not villain.villain_defeated  then
					AddEmploymentHistoryLog(attacker, self.id, { day = GetCampaignDay(), nameId = TGetID(villain.Name) })
				end
			end,
		}),
	},
	text = T(315746854216, --[[EmploymentHistoryLine VillainDefeated text]] "Day <day> - Defeated <em><villain></em>"),
})

PlaceObj('EmploymentHistoryLine', {
	GetText = function (self, context)
		local operation = SectorOperations[context.reason]
		local ctx = { reasonText = operation and operation.display_name }
		for k,v in pairs(context) do ctx[k] = v end
		return T{self.text, ctx}
	end,
	group = "Default",
	id = "WoundHealed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks, reason)
				if IsMerc(obj) and id == "Wounded" and reason then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay(), reason = reason })
				end
			end,
			HandlerCode = function (self, obj, id, stacks, reason)
				if IsMerc(obj) and id == "Wounded" and reason then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay(), reason = reason })
				end
			end,
		}),
	},
	text = T(675778881722, --[[EmploymentHistoryLine WoundHealed text]] "Day <day> - Wound was healed (<em><reasonText></em>)"),
})

PlaceObj('EmploymentHistoryLine', {
	group = "Default",
	id = "Wounded",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Wounded" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if IsMerc(obj) and id == "Wounded" then
					AddEmploymentHistoryLog(obj, self.id, { day = GetCampaignDay() })
				end
			end,
		}),
	},
	text = T(143684346539, --[[EmploymentHistoryLine Wounded text]] "Day <day> - Got wounded"),
})

