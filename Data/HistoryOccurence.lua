-- ========== GENERATED BY HistoryOccurence Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('QuestIsVariableBool', {
			QuestId = "04_Betrayal",
			Vars = set( "Given" ),
			__eval = function ()
				local quest = gv_Quests['04_Betrayal'] or QuestGetState('04_Betrayal')
				return quest.Given
			end,
		}),
	},
	group = "Betrayal",
	id = "Betrayal",
	sector = "E9",
	text = T(710697239689, --[[HistoryOccurence Betrayal text]] "We were betrayed. The refugee camp was destroyed"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "DiamondRed",
					Vars = set( "BadWin" ),
					__eval = function ()
						local quest = gv_Quests['DiamondRed'] or QuestGetState('DiamondRed')
						return quest.BadWin
					end,
				}),
				PlaceObj('QuestIsVariableNum', {
					Amount = 3,
					Condition = "<",
					Prop = "MinersAlive",
					QuestId = "DiamondRed",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "BonusMarthaHerman",
	sector = "A2",
	text = T(671196901724, --[[HistoryOccurence BonusMarthaHerman text]] "<em>Martha and Herman</em> have agreed to work in the mine. The income of the mine was increased"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "CorazonCaptureMine",
					Vars = set( "FleatownSyndicate", "TCE_FleatownSyndicate_High" ),
					__eval = function ()
						local quest = gv_Quests['CorazonCaptureMine'] or QuestGetState('CorazonCaptureMine')
						return quest.FleatownSyndicate and quest.TCE_FleatownSyndicate_High
					end,
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "FleatownSyndicateHigh",
	sector = "A2",
	text = T(195100807950, --[[HistoryOccurence FleatownSyndicateHigh text]] "Made a deal with the <em>Fleatown Syndicate</em>, greatly increasing the income of the mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('QuestIsVariableBool', {
			QuestId = "CorazonCaptureMine",
			Vars = set({
	FleatownSyndicate = true,
	TCE_FleatownSyndicate_High = false,
}),
			__eval = function ()
				local quest = gv_Quests['CorazonCaptureMine'] or QuestGetState('CorazonCaptureMine')
				return quest.FleatownSyndicate and not quest.TCE_FleatownSyndicate_High
			end,
		}),
	},
	group = "DiamondRed",
	id = "FleatownSyndicateLow",
	sector = "A2",
	text = T(265502882091, --[[HistoryOccurence FleatownSyndicateLow text]] "Made a deal with the <em>Fleatown Syndicate</em>, increasing the income of the mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('QuestIsVariableBool', {
			QuestId = "CorazonCaptureMine",
			Vars = set( "RefugeeWorkers" ),
			__eval = function ()
				local quest = gv_Quests['CorazonCaptureMine'] or QuestGetState('CorazonCaptureMine')
				return quest.RefugeeWorkers
			end,
		}),
	},
	group = "DiamondRed",
	id = "RefugeeWorkers",
	sector = "A2",
	text = T(231406698449, --[[HistoryOccurence RefugeeWorkers text]] "Hired workers from the <em>Refugee Camp</em>, increasing the income of the mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "CorazonCaptureMine",
					Vars = set( "RefugeeWorkers" ),
					__eval = function ()
						local quest = gv_Quests['CorazonCaptureMine'] or QuestGetState('CorazonCaptureMine')
						return quest.RefugeeWorkers
					end,
				}),
				PlaceObj('CityHasLoyalty', {
					Amount = 50,
					City = "RefugeeCamp",
					Condition = ">=",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "RefugeeWorkersMorale",
	sector = "A2",
	text = T(826626183388, --[[HistoryOccurence RefugeeWorkersMorale text]] "Earned the loyalty of the <em>Refugee Camp</em> workers, further increasing the income of the mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "DiamondRed",
					Vars = set( "BadWin" ),
					__eval = function ()
						local quest = gv_Quests['DiamondRed'] or QuestGetState('DiamondRed')
						return quest.BadWin
					end,
				}),
				PlaceObj('QuestIsVariableNum', {
					Amount = 3,
					Prop = "MinersAlive",
					QuestId = "DiamondRed",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "WinBad",
	sector = "A2",
	text = T(783189663097, --[[HistoryOccurence WinBad text]] "Moderate casualties among the miners in the Diamond Red battle. The Mine output was decreased"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "DiamondRed",
					Vars = set( "GoodWin" ),
					__eval = function ()
						local quest = gv_Quests['DiamondRed'] or QuestGetState('DiamondRed')
						return quest.GoodWin
					end,
				}),
				PlaceObj('QuestIsVariableNum', {
					Amount = 9,
					Condition = "<",
					Prop = "MinersAlive",
					QuestId = "DiamondRed",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "WinGood",
	sector = "A2",
	text = T(711573232619, --[[HistoryOccurence WinGood text]] "Light casualties among the miners in the Diamond Red battle. The Mine output was slightly decreased"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "DiamondRed",
					Vars = set( "GoodWin" ),
					__eval = function ()
						local quest = gv_Quests['DiamondRed'] or QuestGetState('DiamondRed')
						return quest.GoodWin
					end,
				}),
				PlaceObj('QuestIsVariableNum', {
					Amount = 9,
					Prop = "MinersAlive",
					QuestId = "DiamondRed",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "WinPerfect",
	sector = "A2",
	text = T(604268834318, --[[HistoryOccurence WinPerfect text]] "No miners died in the Diamond Red battle. The Mine output remained optimal"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "DiamondRed",
					Vars = set( "BadWin" ),
					__eval = function ()
						local quest = gv_Quests['DiamondRed'] or QuestGetState('DiamondRed')
						return quest.BadWin
					end,
				}),
				PlaceObj('QuestIsVariableNum', {
					Amount = 3,
					Condition = "<",
					Prop = "MinersAlive",
					QuestId = "DiamondRed",
				}),
			},
		}),
	},
	group = "DiamondRed",
	id = "WinTerrible",
	sector = "A2",
	text = T(508438390967, --[[HistoryOccurence WinTerrible text]] "Heavy casualties among the miners in the Diamond Red battle. The Mine output was significantly decreased"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('QuestIsVariableBool', {
			QuestId = "01_Landing",
			Vars = set( "Given" ),
			__eval = function ()
				local quest = gv_Quests['01_Landing'] or QuestGetState('01_Landing')
				return quest.Given
			end,
		}),
	},
	group = "Initial",
	id = "Initial",
	text = T(934323988009, --[[HistoryOccurence Initial text]] "Mission started. Assembling team"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('QuestIsVariableBool', {
			QuestId = "Luigi",
			Vars = set( "BossPartnership" ),
			__eval = function ()
				local quest = gv_Quests['Luigi'] or QuestGetState('Luigi')
				return quest.BossPartnership
			end,
		}),
	},
	group = "Luigi",
	id = "BlaubertPartnership",
	sector = "I9",
	text = T(456413867919, --[[HistoryOccurence BlaubertPartnership text]] "Secured a partnership with <em>Boss Blaubert</em>. The income of all mines was increased"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		local operation = SectorOperations[context.operationId or context.activityId]
		local ctx = {display_name = operation.display_name}
		if not ctx then return "" end
		for k,v in pairs(context) do ctx[k] = v end
		
		local text = T{self.text, ctx}
		if ctx.sectorId then
			text = text .. T{905957213338, " in <em><SectorName(sectorId)></em>", ctx}
		end
		return text
	end,
	group = "Repeatable",
	id = "ActivityFinished",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "OperationChanged",
			Handler = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving" and not interrupted then
					local context = { unitId = unit.session_id, operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession,  sectorId = gv_Squads[unit.Squad].CurrentSector }
					LogHistoryOccurence(self.id, context)
				end
			end,
			HandlerCode = function (self, unit, oldOperation, newOperation, prevProfession, interrupted)
				if newOperation.id == "Idle" and oldOperation.id ~= "Traveling" and oldOperation.id ~= "Arriving" and not interrupted then
					local context = { unitId = unit.session_id, operationId = oldOperation.id, day = GetCampaignDay(), professionId = prevProfession,  sectorId = gv_Squads[unit.Squad].CurrentSector }
					LogHistoryOccurence(self.id, context)
				end
			end,
		}),
	},
	repeatable = true,
	text = T(275712874018, --[[HistoryOccurence ActivityFinished text]] "Operation finished: <em><display_name></em>"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "BecomeDisliked",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "BecomeDisliked",
			Handler = function (self, unit, newDislike)
				if not IsImpUnit(unit) then
					LogHistoryOccurence(self.id, {unitId = unit, otherUnitId = newDislike})
				end
			end,
			HandlerCode = function (self, unit, newDislike)
				if not IsImpUnit(unit) then
					LogHistoryOccurence(self.id, {unitId = unit, otherUnitId = newDislike})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(779263789672, --[[HistoryOccurence BecomeDisliked text]] "<em><Nick(unitId)></em> started to dislike <em><Nick(otherUnitId)></em>"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "BecomeLiked",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "BecomeDisliked",
			Handler = function (self, unit, newDislike)
				if not IsImpUnit(unit) then
					LogHistoryOccurence(self.id, {unitId = unit, otherUnitId = newDislike})
				end
			end,
			HandlerCode = function (self, unit, newDislike)
				if not IsImpUnit(unit) then
					LogHistoryOccurence(self.id, {unitId = unit, otherUnitId = newDislike})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(921710220353, --[[HistoryOccurence BecomeLiked text]] "<em><Nick(unitId)></em> started to like <em><Nick(otherUnitId)></em>"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "CombatTaskCompleted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "CombatTaskFinished",
			Handler = function (self, taskId, unit, success)
				if success == true then
					LogHistoryOccurence(self.id, {unitId = unit.session_id, taskId = taskId})
				end
			end,
			HandlerCode = function (self, taskId, unit, success)
				if success == true then
					LogHistoryOccurence(self.id, {unitId = unit.session_id, taskId = taskId})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(683808237115, --[[HistoryOccurence CombatTaskCompleted text]] "Completed <em><CombatTask(taskId)></em> combat task (<em><Nick(unitId)></em>)"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "CombatTaskFailed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "CombatTaskFinished",
			Handler = function (self, taskId, unit, success)
				if success == false then
					LogHistoryOccurence(self.id, {unitId = unit.session_id, taskId = taskId})
				end
			end,
			HandlerCode = function (self, taskId, unit, success)
				if success == false then
					LogHistoryOccurence(self.id, {unitId = unit.session_id, taskId = taskId})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(772190709213, --[[HistoryOccurence CombatTaskFailed text]] "Failed <em><CombatTask(taskId)></em> combat task (<em><Nick(unitId)></em>)"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		if type(context) == "table" then
			local nicks = {}
			for _, ud in ipairs(context) do
				local nick = gv_UnitData[ud].Nick
				table.insert(nicks, nick)
			end
			local nicksT = ConcatListWithAnd(nicks)
			return T{self.text, Nick = nicksT}
		else
			local ctx = gv_UnitData[context]
			return T{self.text, ctx}
		end
	end,
	group = "Repeatable",
	id = "MercContractExpired",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercHireStatusChanged",
			Handler = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and oldStatus == "Hired" and newStatus == "Available" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
			HandlerCode = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and oldStatus == "Hired" and newStatus == "Available" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
		}),
	},
	repeatable = true,
	text = T(445857007703, --[[HistoryOccurence MercContractExpired text]] "Contract expired: <em><Nick></em>"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		if type(context) == "table" then
			local nicks = {}
			for _, ud in ipairs(context) do
				local nick = gv_UnitData[ud].Nick
				table.insert(nicks, nick)
			end
			local nicksT = ConcatListWithAnd(nicks)
			return T{self.text, Nick = nicksT}
		else
			local ctx = gv_UnitData[context]
			return T{self.text, ctx}
		end
	end,
	group = "Repeatable",
	id = "MercContractExtended",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercContractExtended",
			Handler = function (self, unitData)
				LogHistoryOccurence(self.id, unitData.session_id)
			end,
			HandlerCode = function (self, unitData)
				LogHistoryOccurence(self.id, unitData.session_id)
			end,
		}),
	},
	repeatable = true,
	text = T(171943905186, --[[HistoryOccurence MercContractExtended text]] "Contract renewed: <em><Nick></em>"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		local ctx = gv_UnitData[context]
		return T{self.text, ctx}
	end,
	group = "Repeatable",
	id = "MercDead",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercHireStatusChanged",
			Handler = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and newStatus == "Dead" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
			HandlerCode = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and newStatus == "Dead" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
		}),
	},
	repeatable = true,
	text = T(621323861711, --[[HistoryOccurence MercDead text]] "<em><Nick></em> died. Rest in peace"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		if type(context) == "table" then
			local nicks = {}
			for _, ud in ipairs(context) do
				local nick = gv_UnitData[ud].Nick
				table.insert(nicks, nick)
			end
			local nicksT = ConcatListWithAnd(nicks)
			return T{self.text, Nick = nicksT}
		else
			local ctx = gv_UnitData[context]
			return T{self.text, ctx}
		end
	end,
	group = "Repeatable",
	id = "MercHire",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MercHireStatusChanged",
			Handler = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and not IsImpUnit(unitData) and oldStatus== "Available" and newStatus == "Hired" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
			HandlerCode = function (self, unitData, oldStatus, newStatus)
				if IsMerc(unitData) and not IsImpUnit(unitData) and oldStatus== "Available" and newStatus == "Hired" then
					LogHistoryOccurence(self.id, unitData.session_id)
				end
			end,
		}),
	},
	repeatable = true,
	text = T(731552829906, --[[HistoryOccurence MercHire text]] "Hired: <em><Nick></em>"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		return T{self.text, context}
	end,
	group = "Repeatable",
	id = "NoLongerInDebt",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MoneyChanged",
			Handler = function (self, amount, logReason, previousBalance)
				local previousMoney = previousBalance
				local moneyNow = previousMoney + amount
				local wasInDebt = previousMoney < 0
				local isNowInDebt = moneyNow < 0
				if wasInDebt and not isNowInDebt then
					LogHistoryOccurence(self.id, { money = moneyNow })
				end
			end,
			HandlerCode = function (self, amount, logReason, previousBalance)
				local previousMoney = previousBalance
				local moneyNow = previousMoney + amount
				local wasInDebt = previousMoney < 0
				local isNowInDebt = moneyNow < 0
				if wasInDebt and not isNowInDebt then
					LogHistoryOccurence(self.id, { money = moneyNow })
				end
			end,
		}),
	},
	repeatable = true,
	text = T(426721152529, --[[HistoryOccurence NoLongerInDebt text]] "Out of debt: <money(money)>"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "QuestCompleted",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "QuestParamChanged",
			Handler = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Completed" and newVal == true then
					LogHistoryOccurence(self.id, {questId = questId})
				end
			end,
			HandlerCode = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Completed" and newVal == true then
					LogHistoryOccurence(self.id, {questId = questId})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(112690735945, --[[HistoryOccurence QuestCompleted text]] "<em><Quest(questId)></em> completed"),
})

PlaceObj('HistoryOccurence', {
	group = "Repeatable",
	id = "QuestFailed",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "QuestParamChanged",
			Handler = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Failed" and newVal == true then
					LogHistoryOccurence(self.id, {questId = questId})
				end
			end,
			HandlerCode = function (self, questId, varId, prevVal, newVal)
				local quest = Quests[questId]
				if not quest.Hidden and varId == "Failed" and newVal == true then
					LogHistoryOccurence(self.id, {questId = questId})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(726243376400, --[[HistoryOccurence QuestFailed text]] "Quest failed: <em><Quest(questId)></em>"),
})

PlaceObj('HistoryOccurence', {
	Comment = "Very specific case. Gets the text from the Quest Notes.",
	GetText = function (self, context)
		local quest = gv_Quests[context.questId]
		local note = table.find_value(quest.NoteDefs, "Idx", context.noteIdx)
		local text = note.Text
		return T{text, quest}
	end,
	group = "Repeatable",
	id = "QuestNote",
	repeatable = true,
	text = T(222078152628, --[[HistoryOccurence QuestNote text]] "<questNoteText>"),
})

PlaceObj('HistoryOccurence', {
	Comment = "by player",
	group = "Repeatable",
	id = "SectorAttackedAndLost",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if playerAttacking and not playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if playerAttacking and not playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(664990616417, --[[HistoryOccurence SectorAttackedAndLost text]] "Sector attack failed: <em><SectorName(sectorId)></em>"),
})

PlaceObj('HistoryOccurence', {
	Comment = "by player",
	group = "Repeatable",
	id = "SectorAttackedAndWon",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if playerAttacking and playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if playerAttacking and playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(798434788363, --[[HistoryOccurence SectorAttackedAndWon text]] "Sector won: <em><SectorName(sectorId)></em> successfully"),
})

PlaceObj('HistoryOccurence', {
	Comment = "by player",
	group = "Repeatable",
	id = "SectorDefendedAndLost",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if not playerAttacking and not playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if not playerAttacking and not playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(969797473778, --[[HistoryOccurence SectorDefendedAndLost text]] "Sector lost: <em><SectorName(sectorId)></em>"),
})

PlaceObj('HistoryOccurence', {
	Comment = "by player",
	group = "Repeatable",
	id = "SectorDefendedAndWon",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "ConflictEnd",
			Handler = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if not playerAttacking and playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
			HandlerCode = function (self, sector, bNoVoice, playerAttacking, playerWon)
				if not playerAttacking and playerWon then
					LogHistoryOccurence(self.id, {sectorId = sector.Id})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(874778123675, --[[HistoryOccurence SectorDefendedAndWon text]] "Sector defended: <em><SectorName(sectorId)></em>"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		if context.nameId then
			local name = T{context.nameId, TranslationTable[context.nameId]}
			local ctx = { villain = name }
			return T{self.text, ctx}
		end
	end,
	group = "Repeatable",
	id = "VillainDefeated",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "VillainDefeated",
			Handler = function (self, villain, attacker)
				if IsMerc(attacker) and not villain.villain_defeated then
					LogHistoryOccurence(self.id, {nameId = TGetID(villain.Name)})
				end
			end,
			HandlerCode = function (self, villain, attacker)
				if IsMerc(attacker) and not villain.villain_defeated then
					LogHistoryOccurence(self.id, {nameId = TGetID(villain.Name)})
				end
			end,
		}),
	},
	repeatable = true,
	text = T(638793731943, --[[HistoryOccurence VillainDefeated text]] "Defeated <em><villain></em>"),
})

PlaceObj('HistoryOccurence', {
	GetText = function (self, context)
		return T{self.text, context}
	end,
	group = "Repeatable",
	id = "WentIntoDebt",
	msg_reactions = {
		PlaceObj('MsgReaction', {
			Event = "MoneyChanged",
			Handler = function (self, amount, logReason, previousBalance)
				local previousMoney = previousBalance
				local moneyNow = previousMoney + amount
				local wasInDebt = previousMoney < 0
				local isNowInDebt = moneyNow < 0
				if not wasInDebt and isNowInDebt then
					LogHistoryOccurence(self.id, { money = moneyNow })
				end
			end,
			HandlerCode = function (self, amount, logReason, previousBalance)
				local previousMoney = previousBalance
				local moneyNow = previousMoney + amount
				local wasInDebt = previousMoney < 0
				local isNowInDebt = moneyNow < 0
				if not wasInDebt and isNowInDebt then
					LogHistoryOccurence(self.id, { money = moneyNow })
				end
			end,
		}),
	},
	repeatable = true,
	text = T(559816132572, --[[HistoryOccurence WentIntoDebt text]] "Went into debt: <money(money)>"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"D10",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairCrossroadsCamp",
	sector = "D10",
	text = T(951872115047, --[[HistoryOccurence TwelveChairCrossroadsCamp text]] "There is an ornate chair in the Crossroads Camp"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"A2",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairDiamondRed",
	sector = "A2",
	text = T(201545120713, --[[HistoryOccurence TwelveChairDiamondRed text]] "There is an ornate chair in Diamond Red"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"B12",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairDrachenbergMIne",
	sector = "B12",
	text = T(969191775903, --[[HistoryOccurence TwelveChairDrachenbergMIne text]] "There is an ornate chair in the Drachenberg Mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"I1",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairFlagHill",
	sector = "I1",
	text = T(881755150449, --[[HistoryOccurence TwelveChairFlagHill text]] "There is an ornate chair in Flag Hill"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"H9",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairFleaMarketVilla",
	sector = "H9",
	text = T(238749548880, --[[HistoryOccurence TwelveChairFleaMarketVilla text]] "There is an ornate chair in the Flea Market Villa"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"C7_Underground",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairFosseNoire",
	sector = "C7_Underground",
	text = T(381682938169, --[[HistoryOccurence TwelveChairFosseNoire text]] "There is an ornate chair in the Fosse Noire Mine"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set( "Given", "Lead_Blaubert" ),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return quest.Given and quest.Lead_Blaubert
					end,
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairIntelBlaubert",
	sector = "D10",
	text = T(725492530042, --[[HistoryOccurence TwelveChairIntelBlaubert text]] "Twelve Chairs - some of the chairs are in the Rimville Mansion and the Flea Market Villa"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"G10",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairIslandCamp",
	sector = "G10",
	text = T(944880299357, --[[HistoryOccurence TwelveChairIslandCamp text]] "There is an ornate chair in the Island Camp"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"D8",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairPantagruelDowntown",
	sector = "D8",
	text = T(770153289358, --[[HistoryOccurence TwelveChairPantagruelDowntown text]] "There is an ornate chair in downtown Pantagruel"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"D7",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairPantagruelSlums",
	sector = "D7",
	text = T(918802204432, --[[HistoryOccurence TwelveChairPantagruelSlums text]] "There is an ornate chair in the Pantagruel Slums"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"I9",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairRimville",
	sector = "I9",
	text = T(463506204839, --[[HistoryOccurence TwelveChairRimville text]] "There is an ornate chair in the Rimville Mansion"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"H12",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairSanatorium",
	sector = "H12",
	text = T(791891864921, --[[HistoryOccurence TwelveChairSanatorium text]] "There is an ornate chair in the Sanatorium"),
})

PlaceObj('HistoryOccurence', {
	conditions = {
		PlaceObj('AND', {
			Conditions = {
				PlaceObj('QuestIsVariableBool', {
					QuestId = "TheTwelveChairs",
					Vars = set({
	Given = false,
}),
					__eval = function ()
						local quest = gv_Quests['TheTwelveChairs'] or QuestGetState('TheTwelveChairs')
						return not quest.Given
					end,
				}),
				PlaceObj('UnitHasInteraction', {
					'TargetUnit', "any merc",
					'Group', "12Chairs_ChairMarker",
				}),
				PlaceObj('PlayerIsInSectors', {
					Sectors = {
						"F7",
					},
				}),
			},
		}),
	},
	group = "TwelveChairs",
	id = "TwelveChairSavannahCamp",
	sector = "F7",
	text = T(420356104995, --[[HistoryOccurence TwelveChairSavannahCamp text]] "There is an ornate chair in the Savannah Camp"),
})

