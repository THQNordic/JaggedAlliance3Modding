-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Id', "Flanked",
	'Parameters', {
		PlaceObj('PresetParamNumber', {
			'Name', "bonus",
			'Value', 20,
			'Tag', "<bonus>",
		}),
	},
	'object_class', "StatusEffect",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				
				local function exec(self, obj, id, stacks)
				if not obj:IsMerc() and IsNetPlayerTurn() then
					PlayVoiceResponse(obj, "AIFlanked")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "StatusEffectAdded" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks)
				end
				
				if self:VerifyReaction("StatusEffectAdded", reaction_def, obj, obj, id, stacks) then
					exec(self, obj, id, stacks)
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if not obj:IsMerc() and IsNetPlayerTurn() then
					PlayVoiceResponse(obj, "AIFlanked")
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "target",
			Event = "GatherDamageModifications",
			Handler = function (self, attacker, target, action_id, weapon, attack_args, hit_descr, mod_data)
				
				local function exec(self, attacker, target, action_id, weapon, attack_args, hit_descr, mod_data)
				local flankBonus = self:ResolveValue("bonus")
				mod_data.base_damage = MulDivRound(mod_data.base_damage, 100 + flankBonus, 100)
				mod_data.breakdown[#mod_data.breakdown + 1] = { name = self.DisplayName, value = flankBonus }
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "GatherDamageModifications" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, attacker, target, action_id, weapon, attack_args, hit_descr, mod_data)
				end
				
				if self:VerifyReaction("GatherDamageModifications", reaction_def, target, attacker, target, action_id, weapon, attack_args, hit_descr, mod_data) then
					exec(self, attacker, target, action_id, weapon, attack_args, hit_descr, mod_data)
				end
			end,
			HandlerCode = function (self, attacker, target, attack_args, hit_descr, mod_data)
				local flankBonus = self:ResolveValue("bonus")
				mod_data.base_damage = MulDivRound(mod_data.base_damage, 100 + flankBonus, 100)
				mod_data.breakdown[#mod_data.breakdown + 1] = { name = self.DisplayName, value = flankBonus }
			end,
			helpActor = "target",
		}),
	},
	'DisplayName', T(529722665638, --[[CharacterEffectCompositeDef Flanked DisplayName]] "Flanked"),
	'Description', T(938831848548, --[[CharacterEffectCompositeDef Flanked Description]] "Threatened from both sides. Attacks against this character have <em>+<percent(bonus)> increased damage</em>."),
	'type', "Debuff",
	'Icon', "UI/Hud/Status effects/flanked",
	'RemoveOnEndCombat', true,
	'Shown', true,
})

