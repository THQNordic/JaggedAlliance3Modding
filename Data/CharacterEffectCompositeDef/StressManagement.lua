-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Group', "Wisdom",
	'Id', "StressManagement",
	'SortKey', 4,
	'object_class', "Perk",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				
				local function exec(self, obj, id, stacks)
				if HasPerk(obj, self.id) and CharacterEffectDefs[id].type == "Debuff" and not obj:HasStatusEffect("StressManagementCounter") then
					obj:AddStatusEffect("Inspired")
					obj:AddStatusEffect("StressManagementCounter")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "StatusEffectAdded" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks)
				end
				
				if self:VerifyReaction("StatusEffectAdded", reaction_def, obj, obj, id, stacks) then
					exec(self, obj, id, stacks)
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if HasPerk(obj, self.id) and CharacterEffectDefs[id].type == "Debuff" and not obj:HasStatusEffect("StressManagementCounter") then
					obj:AddStatusEffect("Inspired")
					obj:AddStatusEffect("StressManagementCounter")
				end
			end,
		}),
	},
	'DisplayName', T(578724057231, --[[CharacterEffectCompositeDef StressManagement DisplayName]] "Stress Management"),
	'Description', T(957117254898, --[[CharacterEffectCompositeDef StressManagement Description]] "Become <GameTerm('Inspired')> after suffering a <em>negative effect</em> for the <em>first time</em> in combat."),
	'Icon', "UI/Icons/Perks/StressManagement",
	'Tier', "Silver",
	'Stat', "Wisdom",
	'StatValue', 80,
})

