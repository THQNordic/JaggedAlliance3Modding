-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Group', "Agility",
	'Id', "SingularPurpose",
	'SortKey', 9,
	'Parameters', {
		PlaceObj('PresetParamPercent', {
			'Name', "damageBonus",
			'Value', 30,
			'Tag', "<damageBonus>%",
		}),
	},
	'object_class', "Perk",
	'msg_reactions', {
		PlaceObj('MsgReaction', {
			Event = "OnKill",
			Handler = function (self, attacker, killedUnits)
				local reaction_idx = table.find(self.msg_reactions or empty_table, "Event", "OnKill")
				if not reaction_idx then return end
				
				local function exec(self, attacker, killedUnits)
				if g_Combat then
					attacker:AddStatusEffect("SingularPurposeBuff")
				end
				end
				local id = GetCharacterEffectId(self)
				
				if id then
					if IsKindOf(attacker, "StatusEffectObject") and attacker:HasStatusEffect(id) then
						exec(self, attacker, killedUnits)
					end
				else
					exec(self, attacker, killedUnits)
				end
				
			end,
			HandlerCode = function (self, attacker, killedUnits)
				if g_Combat then
					attacker:AddStatusEffect("SingularPurposeBuff")
				end
			end,
		}),
		PlaceObj('MsgReaction', {
			Event = "GatherDamageModifications",
			Handler = function (self, attacker, target, attack_args, hit_descr, mod_data)
				local reaction_idx = table.find(self.msg_reactions or empty_table, "Event", "GatherDamageModifications")
				if not reaction_idx then return end
				
				local function exec(self, attacker, target, attack_args, hit_descr, mod_data)
				if attacker:HasStatusEffect("SingularPurposeBuff") then 
					local damageBonus = self:ResolveValue("damageBonus")
					mod_data.base_damage = MulDivRound(mod_data.base_damage, 100 + damageBonus, 100)
					mod_data.breakdown[#mod_data.breakdown + 1] = { name = self.DisplayName, value = damageBonus }
				end
				end
				local id = GetCharacterEffectId(self)
				
				if id then
					if IsKindOf(attacker, "StatusEffectObject") and attacker:HasStatusEffect(id) then
						exec(self, attacker, target, attack_args, hit_descr, mod_data)
					end
				else
					exec(self, attacker, target, attack_args, hit_descr, mod_data)
				end
				
			end,
			HandlerCode = function (self, attacker, target, attack_args, hit_descr, mod_data)
				if attacker:HasStatusEffect("SingularPurposeBuff") then 
					local damageBonus = self:ResolveValue("damageBonus")
					mod_data.base_damage = MulDivRound(mod_data.base_damage, 100 + damageBonus, 100)
					mod_data.breakdown[#mod_data.breakdown + 1] = { name = self.DisplayName, value = damageBonus }
				end
			end,
		}),
	},
	'DisplayName', T(899667530546, --[[CharacterEffectCompositeDef SingularPurpose DisplayName]] "Total Concentration"),
	'Description', T(699634025627, --[[CharacterEffectCompositeDef SingularPurpose Description]] "Attacks deal <em><percent(damageBonus)></em> extra <em>Damage</em> after a <em>kill</em>.\n\nEnds when you <em>miss</em> or at the end of combat."),
	'Icon', "UI/Icons/Perks/SingularPurpose",
	'Tier', "Gold",
	'Stat', "Agility",
	'StatValue', 90,
})

