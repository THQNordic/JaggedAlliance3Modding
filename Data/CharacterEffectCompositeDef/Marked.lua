-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Id', "Marked",
	'Parameters', {},
	'object_class', "StatusEffect",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "target",
			Event = "DamageTaken",
			Handler = function (self, attacker, target, dmg, hit_descr)
				
				local function exec(self, attacker, target, dmg, hit_descr)
				if IsKindOf(attacker, "Unit") and hit_descr.critical then
					target:RemoveStatusEffect("Marked")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "DamageTaken" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, attacker, target, dmg, hit_descr)
				end
				
				if self:VerifyReaction("DamageTaken", reaction_def, target, attacker, target, dmg, hit_descr) then
					exec(self, attacker, target, dmg, hit_descr)
				end
			end,
			HandlerCode = function (self, attacker, target, dmg, hit_descr)
				if IsKindOf(attacker, "Unit") and hit_descr.critical then
					target:RemoveStatusEffect("Marked")
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "unit",
			Event = "UnitBeginTurn",
			Handler = function (self, unit)
				
				local function exec(self, unit)
				unit:RemoveStatusEffect("Marked")
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "UnitBeginTurn" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, unit)
				end
				
				if self:VerifyReaction("UnitBeginTurn", reaction_def, unit, unit) then
					exec(self, unit)
				end
			end,
			HandlerCode = function (self, unit)
				unit:RemoveStatusEffect("Marked")
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "target",
			Event = "GatherCritChanceModifications",
			Handler = function (self, attacker, target, action_id, weapon, data)
				
				local function exec(self, attacker, target, action_id, weapon, data)
				data.guaranteed_crit = true
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[3]
				if not reaction_def or reaction_def.Event ~= "GatherCritChanceModifications" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, attacker, target, action_id, weapon, data)
				end
				
				if self:VerifyReaction("GatherCritChanceModifications", reaction_def, target, attacker, target, action_id, weapon, data) then
					exec(self, attacker, target, action_id, weapon, data)
				end
			end,
			HandlerCode = function (self, attacker, target, data)
				data.guaranteed_crit = true
			end,
			helpActor = "target",
		}),
	},
	'DisplayName', T(659013327758, --[[CharacterEffectCompositeDef Marked DisplayName]] "Marked"),
	'Description', T(644417904774, --[[CharacterEffectCompositeDef Marked Description]] "Next hit against this unit will <em>score a Crit</em> unless prevented by armor or a <em>Grazing hit</em>."),
	'AddEffectText', T(228474922512, --[[CharacterEffectCompositeDef Marked AddEffectText]] "<em><DisplayName></em> is marked"),
	'RemoveEffectText', T(751783684507, --[[CharacterEffectCompositeDef Marked RemoveEffectText]] "<em><DisplayName></em> is no longer marked"),
	'type', "Debuff",
	'lifetime', "Until End of Turn",
	'Icon', "UI/Hud/Status effects/marked",
	'RemoveOnEndCombat', true,
	'Shown', true,
})

