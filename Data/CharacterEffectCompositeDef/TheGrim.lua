-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Group', "Perk-Personal",
	'Id', "TheGrim",
	'Parameters', {
		PlaceObj('PresetParamNumber', {
			'Name', "fearAoE",
			'Value', 8,
			'Tag', "<fearAoE>",
		}),
	},
	'Comment', "Reaper - attack that crits and panics on kill",
	'object_class', "Perk",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "attacker",
			Event = "OnAttack",
			Handler = function (self, attacker, action, target, results, attack_args)
				
				local function exec(self, attacker, action, target, results, attack_args)
				if action.id == self.id and IsKindOf(target, "Unit") and table.find(results.killed_units or empty_table, target) then
					local units = {}
					for _, unit in ipairs(g_Units) do
						if unit.session_id ~= target.session_id and unit.team:IsAllySide(target.team) and DivRound(unit:GetDist(target), const.SlabSizeX) <= self:ResolveValue("fearAoE") then
							table.insert_unique(units, unit)
							unit:AddStatusEffect("Panicked")
							unit.ActionPoints = unit:GetMaxActionPoints()
						end
					end
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "OnAttack" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, attacker, action, target, results, attack_args)
				end
				
				if self:VerifyReaction("OnAttack", reaction_def, attacker, attacker, action, target, results, attack_args) then
					exec(self, attacker, action, target, results, attack_args)
				end
			end,
			HandlerCode = function (self, attacker, action, target, results, attack_args)
				if action.id == self.id and IsKindOf(target, "Unit") and table.find(results.killed_units or empty_table, target) then
					local units = {}
					for _, unit in ipairs(g_Units) do
						if unit.session_id ~= target.session_id and unit.team:IsAllySide(target.team) and DivRound(unit:GetDist(target), const.SlabSizeX) <= self:ResolveValue("fearAoE") then
							table.insert_unique(units, unit)
							unit:AddStatusEffect("Panicked")
							unit.ActionPoints = unit:GetMaxActionPoints()
						end
					end
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "attacker",
			Event = "GatherCritChanceModifications",
			Handler = function (self, attacker, target, action_id, weapon, data)
				
				local function exec(self, attacker, target, action_id, weapon, data)
				if data.action_id == self.id then
					data.guaranteed_crit = true
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "GatherCritChanceModifications" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, attacker, target, action_id, weapon, data)
				end
				
				if self:VerifyReaction("GatherCritChanceModifications", reaction_def, attacker, attacker, target, action_id, weapon, data) then
					exec(self, attacker, target, action_id, weapon, data)
				end
			end,
			HandlerCode = function (self, attacker, target, data)
				if data.action_id == self.id then
					data.guaranteed_crit = true
				end
			end,
		}),
	},
	'DisplayName', T(976473584324, --[[CharacterEffectCompositeDef TheGrim DisplayName]] "Grim Fate"),
	'Description', T(760291244490, --[[CharacterEffectCompositeDef TheGrim Description]] "<em>Ranged attack</em> that automatically causes a <GameTerm('Crit')>.\n\nWhen the attack kills an enemy, other nearby enemies will <GameTerm('Panic')>.\n\nCan't be used with Shotguns."),
	'Icon', "UI/Icons/Perks/TheGrim",
	'Tier', "Personal",
})

