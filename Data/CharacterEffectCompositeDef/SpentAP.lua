-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Group', "System",
	'Id', "SpentAP",
	'Comment', "todo: is condition necessary?",
	'object_class', "CharacterEffect",
	'msg_reactions', {
		PlaceObj('MsgReaction', {
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks, reason)
				local reaction_idx = table.find(self.msg_reactions or empty_table, "Event", "StatusEffectRemoved")
				if not reaction_idx then return end
				
				local function exec(self, obj, id, stacks, reason)
				obj:SetEffectValue("spent_ap", nil)
				end
				local _id = GetCharacterEffectId(self)
				if _id == id then exec(self, obj, id, stacks, reason) end
				
			end,
			HandlerCode = function (self, obj, id, stacks, reason)
				obj:SetEffectValue("spent_ap", nil)
			end,
		}),
		PlaceObj('MsgReaction', {
			Event = "UnitBeginTurn",
			Handler = function (self, unit)
				local reaction_idx = table.find(self.msg_reactions or empty_table, "Event", "UnitBeginTurn")
				if not reaction_idx then return end
				
				local function exec(self, unit)
				local ap = unit:GetEffectValue("spent_ap") or 0
				if ap > 0 then
					if unit:HasStatusEffect("FreeMoveOnCombatStart") then
						unit:RemoveStatusEffect("FreeMoveOnCombatStart")
					else
						unit:RemoveStatusEffect("FreeMove")
					end
					unit:RemoveStatusEffect("Focused")
					unit:ConsumeAP(ap)
					unit:RemoveStatusEffect("SpentAP")
				end
				end
				local id = GetCharacterEffectId(self)
				
				if id then
					if IsKindOf(unit, "StatusEffectObject") and unit:HasStatusEffect(id) then
						exec(self, unit)
					end
				else
					exec(self, unit)
				end
				
			end,
			HandlerCode = function (self, unit)
				local ap = unit:GetEffectValue("spent_ap") or 0
				if ap > 0 then
					if unit:HasStatusEffect("FreeMoveOnCombatStart") then
						unit:RemoveStatusEffect("FreeMoveOnCombatStart")
					else
						unit:RemoveStatusEffect("FreeMove")
					end
					unit:RemoveStatusEffect("Focused")
					unit:ConsumeAP(ap)
					unit:RemoveStatusEffect("SpentAP")
				end
			end,
		}),
	},
	'Conditions', {
		PlaceObj('CheckExpression', {
			Expression = function (self, obj) return IsKindOf(obj, "Unit") end,
		}),
	},
	'RemoveOnEndCombat', true,
})

