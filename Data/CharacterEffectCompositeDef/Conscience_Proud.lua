-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Id', "Conscience_Proud",
	'Parameters', {
		PlaceObj('PresetParamNumber', {
			'Name', "days",
			'Value', 1,
			'Tag', "<days>",
		}),
		PlaceObj('PresetParamPercent', {
			'Name', "increase",
			'Value', 15,
			'Tag', "<increase>%",
		}),
	},
	'Comment', "conversations related",
	'object_class', "StatusEffect",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				
				local function exec(self, obj, id, stacks)
				if IsKindOf(obj, "Unit") then
					local effect = obj:GetStatusEffect(self.id)
					effect:SetParameter("proud_start_time", Game.CampaignTime)
					
					--local procentCalc = 1000+self:ResolveValue("increase")*10
					--local stats = UnitPropertiesStats:GetProperties()
					--for i, stat in ipairs(stats) do
						--obj:AddModifier("proud_" .. stat.id, stat.id, procentCalc)
					--end
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "StatusEffectAdded" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks)
				end
				
				if self:VerifyReaction("StatusEffectAdded", reaction_def, obj, obj, id, stacks) then
					exec(self, obj, id, stacks)
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if IsKindOf(obj, "Unit") then
					local effect = obj:GetStatusEffect(self.id)
					effect:SetParameter("proud_start_time", Game.CampaignTime)
					
					--local procentCalc = 1000+self:ResolveValue("increase")*10
					--local stats = UnitPropertiesStats:GetProperties()
					--for i, stat in ipairs(stats) do
						--obj:AddModifier("proud_" .. stat.id, stat.id, procentCalc)
					--end
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks, reason)
				
				local function exec(self, obj, id, stacks, reason)
				if IsKindOf(obj, "Unit") then
					obj:SetEffectValue("proud_start_time", false)
					
					--local stats = UnitPropertiesStats:GetProperties()
					--for i, stat in ipairs(stats) do
						--obj:RemoveModifier("proud_" .. stat.id, stat.id)
					--end
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "StatusEffectRemoved" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks, reason)
				end
				
				if self:VerifyReaction("StatusEffectRemoved", reaction_def, obj, obj, id, stacks, reason) then
					exec(self, obj, id, stacks, reason)
				end
			end,
			HandlerCode = function (self, obj, id, stacks, reason)
				if IsKindOf(obj, "Unit") then
					obj:SetEffectValue("proud_start_time", false)
					
					--local stats = UnitPropertiesStats:GetProperties()
					--for i, stat in ipairs(stats) do
						--obj:RemoveModifier("proud_" .. stat.id, stat.id)
					--end
				end
			end,
		}),
		PlaceObj('MsgActorReactionEffects', {
			Effects = {
				PlaceObj('ConditionalEffect', {
					'Effects', {
						PlaceObj('ExecuteCode', {
							Code = function (self, obj)
								local effect = obj:GetStatusEffect("Conscience_Proud")
								local duration = effect:ResolveValue("days")
								local startTime = effect:ResolveValue("proud_start_time") or 0
								
								local dayStarted = GetTimeAsTable(startTime)
								dayStarted = dayStarted and dayStarted.day
								
								local dayNow = GetTimeAsTable(Game.CampaignTime)
								dayNow = dayNow and dayNow.day
								
								-- Intentionally check if days have passed calendar, and not time wise.
								if dayNow - dayStarted >= duration then
									obj:RemoveStatusEffect("Conscience_Proud")
								end
							end,
							FuncCode = 'local effect = obj:GetStatusEffect("Conscience_Proud")\nlocal duration = effect:ResolveValue("days")\nlocal startTime = effect:ResolveValue("proud_start_time") or 0\n\nlocal dayStarted = GetTimeAsTable(startTime)\ndayStarted = dayStarted and dayStarted.day\n\nlocal dayNow = GetTimeAsTable(Game.CampaignTime)\ndayNow = dayNow and dayNow.day\n\n-- Intentionally check if days have passed calendar, and not time wise.\nif dayNow - dayStarted >= duration then\n	obj:RemoveStatusEffect("Conscience_Proud")\nend',
							SaveAsText = false,
						}),
					},
				}),
			},
			Event = "SatelliteTick",
			Handler = function (self)
				ExecReactionEffects(self, 3, "SatelliteTick", nil, self)
			end,
		}),
	},
	'DisplayName', T(890779283521, --[[CharacterEffectCompositeDef Conscience_Proud DisplayName]] "Proud"),
	'Description', T(106460359100, --[[CharacterEffectCompositeDef Conscience_Proud Description]] "Gained 1 Morale for a day."),
	'AddEffectText', T(661568993220, --[[CharacterEffectCompositeDef Conscience_Proud AddEffectText]] "<em><DisplayName></em> is feeling proud and gained Morale"),
	'type', "Buff",
	'Icon', "UI/Hud/Status effects/well_rested",
	'HasFloatingText', true,
})

