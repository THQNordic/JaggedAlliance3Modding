-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

PlaceObj('CharacterEffectCompositeDef', {
	'Id', "Exposed",
	'object_class', "StatusEffect",
	'msg_reactions', {
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				
				local function exec(self, obj, id, stacks)
				obj:RemoveStatusEffect("Protected")
				Msg("UnitMovementDone", obj)
				if not IsMerc(obj) and obj:IsUsingCover() then
					PlayVoiceResponse(obj, "AILoseCover")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "StatusEffectAdded" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks)
				end
				
				if self:VerifyReaction("StatusEffectAdded", reaction_def, obj, obj, id, stacks) then
					exec(self, obj, id, stacks)
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				obj:RemoveStatusEffect("Protected")
				Msg("UnitMovementDone", obj)
				if not IsMerc(obj) and obj:IsUsingCover() then
					PlayVoiceResponse(obj, "AILoseCover")
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks, reason)
				
				local function exec(self, obj, id, stacks, reason)
				Msg("UnitMovementDone", obj)
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "StatusEffectRemoved" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks, reason)
				end
				
				if self:VerifyReaction("StatusEffectRemoved", reaction_def, obj, obj, id, stacks, reason) then
					exec(self, obj, id, stacks, reason)
				end
			end,
			HandlerCode = function (self, obj, id, stacks, reason)
				Msg("UnitMovementDone", obj)
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "unit",
			Event = "UnitBeginTurn",
			Handler = function (self, unit)
				
				local function exec(self, unit)
				unit:RemoveStatusEffect("Exposed")
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[3]
				if not reaction_def or reaction_def.Event ~= "UnitBeginTurn" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, unit)
				end
				
				if self:VerifyReaction("UnitBeginTurn", reaction_def, unit, unit) then
					exec(self, unit)
				end
			end,
			HandlerCode = function (self, unit)
				unit:RemoveStatusEffect("Exposed")
			end,
		}),
	},
	'Conditions', {
		PlaceObj('UnitIsCombatTurn', {
			Negate = true,
			TargetUnit = "current unit",
		}),
	},
	'DisplayName', T(369202486284, --[[CharacterEffectCompositeDef Exposed DisplayName]] "Exposed"),
	'Description', T(458027451938, --[[CharacterEffectCompositeDef Exposed Description]] "Lose all benefits from being in <em>Cover</em>."),
	'AddEffectText', T(427045387526, --[[CharacterEffectCompositeDef Exposed AddEffectText]] "<em><DisplayName></em> is exposed out of cover"),
	'type', "Debuff",
	'Icon', "UI/Hud/Status effects/exposed",
	'RemoveOnEndCombat', true,
	'Shown', true,
	'HasFloatingText', true,
})

