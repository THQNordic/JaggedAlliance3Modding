-- ========== GENERATED BY CharacterEffectCompositeDef Editor DO NOT EDIT MANUALLY! ==========

UndefineClass('Burning')
DefineClass.Burning = {
	__parents = { "CharacterEffect" },
	__generated_by_class = "CharacterEffectCompositeDef",


	object_class = "CharacterEffect",
	msg_reactions = {
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectAdded",
			Handler = function (self, obj, id, stacks)
				
				local function exec(self, obj, id, stacks)
				if IsKindOf(obj, "Unit") then
					PlayFX("UnitBurning", "start", obj)
					obj:SetEffectValue("burning_start_time", GameTime())
					obj:AddStain("Burning", GetRandomStainSpot())
					ObjModified(obj)
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[1]
				if not reaction_def or reaction_def.Event ~= "StatusEffectAdded" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks)
				end
				
				if self:VerifyReaction("StatusEffectAdded", reaction_def, obj, obj, id, stacks) then
					exec(self, obj, id, stacks)
				end
			end,
			HandlerCode = function (self, obj, id, stacks)
				if IsKindOf(obj, "Unit") then
					PlayFX("UnitBurning", "start", obj)
					obj:SetEffectValue("burning_start_time", GameTime())
					obj:AddStain("Burning", GetRandomStainSpot())
					ObjModified(obj)
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "obj",
			Event = "StatusEffectRemoved",
			Handler = function (self, obj, id, stacks, reason)
				
				local function exec(self, obj, id, stacks, reason)
				if IsKindOf(obj, "Unit") then
					PlayFX("UnitBurning", "end", obj)
					obj:SetEffectValue("burning_start_time")
					obj:ClearStains("Burning")
					ObjModified(obj)
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[2]
				if not reaction_def or reaction_def.Event ~= "StatusEffectRemoved" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, obj, id, stacks, reason)
				end
				
				if self:VerifyReaction("StatusEffectRemoved", reaction_def, obj, obj, id, stacks, reason) then
					exec(self, obj, id, stacks, reason)
				end
			end,
			HandlerCode = function (self, obj, id, stacks, reason)
				if IsKindOf(obj, "Unit") then
					PlayFX("UnitBurning", "end", obj)
					obj:SetEffectValue("burning_start_time")
					obj:ClearStains("Burning")
					ObjModified(obj)
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "unit",
			Event = "UnitBeginTurn",
			Handler = function (self, unit)
				
				local function exec(self, unit)
				local chance = 50 - Max(0, unit.Health - 50) / 2 - MulDivRound(unit:GetLevel(), 25, 10)
				if unit:Random(100) < chance then
					unit:AddStatusEffect("Panicked")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[3]
				if not reaction_def or reaction_def.Event ~= "UnitBeginTurn" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, unit)
				end
				
				if self:VerifyReaction("UnitBeginTurn", reaction_def, unit, unit) then
					exec(self, unit)
				end
			end,
			HandlerCode = function (self, unit)
				local chance = 50 - Max(0, unit.Health - 50) / 2 - MulDivRound(unit:GetLevel(), 25, 10)
				if unit:Random(100) < chance then
					unit:AddStatusEffect("Panicked")
				end
			end,
		}),
		PlaceObj('MsgActorReaction', {
			ActorParam = "unit",
			Event = "UnitEndTurn",
			Handler = function (self, unit)
				
				local function exec(self, unit)
				if not unit:IsDead() then
					EnvEffectBurningTick(unit, nil, "end turn")
				end
				end
				
				if not IsKindOf(self, "MsgReactionsPreset") then return end
				
				local reaction_def = (self.msg_reactions or empty_table)[4]
				if not reaction_def or reaction_def.Event ~= "UnitEndTurn" then return end
				
				if not IsKindOf(self, "MsgActorReactionsPreset") then
					exec(self, unit)
				end
				
				if self:VerifyReaction("UnitEndTurn", reaction_def, unit, unit) then
					exec(self, unit)
				end
			end,
			HandlerCode = function (self, unit)
				if not unit:IsDead() then
					EnvEffectBurningTick(unit, nil, "end turn")
				end
			end,
		}),
	},
	Modifiers = {
		PlaceObj('UnitModifier', {
			mod_add = -15,
			target_prop = "Wisdom",
		}),
	},
	DisplayName = T(178364189448, --[[CharacterEffectCompositeDef Burning DisplayName]] "Burning"),
	Description = T(661121942943, --[[CharacterEffectCompositeDef Burning Description]] "This character may <em>Panic</em> and will <em>take <damage> damage</em> at the end of each turn until they exit the flaming area. <em>Bandage</em> can cure the effect immediately."),
	AddEffectText = T(251545639918, --[[CharacterEffectCompositeDef Burning AddEffectText]] "<em><DisplayName></em> is on fire"),
	type = "Debuff",
	Icon = "UI/Hud/Status effects/burning",
	RemoveOnSatViewTravel = true,
	RemoveOnCampaignTimeAdvance = true,
	Shown = true,
	HasFloatingText = true,
}

