-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	__is_kind_of = "XPopup",
	group = "Zulu ContextMenu",
	id = "InventoryContextMenuMulti",
	PlaceObj('XTemplateWindow', {
		'__condition', function (parent, context) return context end,
		'__class', "ZuluContextMenu",
		'HAlign', "left",
		'VAlign', "top",
		'MinWidth', 220,
		'LayoutMethod', "Box",
		'AnchorType', "custom",
	}, {
		PlaceObj('XTemplateWindow', {
			'__class', "XContentTemplateList",
			'Id', "idPopupWindow",
			'BorderWidth', 0,
			'Padding', box(0, 4, 0, 4),
			'VAlign', "top",
			'LayoutVSpacing', 2,
			'UseClipBox', false,
			'Background', RGBA(255, 255, 255, 0),
			'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
			'HandleMouse', false,
			'FocusedBackground', RGBA(255, 255, 255, 0),
			'KeepSelectionOnRespawn', true,
		}, {
			PlaceObj('XTemplateTemplate', {
				'comment', "give",
				'__condition', function (parent, context) return context and #InventoryGetTargetsForGiveAction(context)>0 end,
				'__template', "ContextMenuButton",
				'Id', "give",
				'FocusOrder', point(1, 2),
				'RelativeFocusOrder', "new-line",
				'OnContextUpdate', function (self, context, ...)
					self:SetEnabled(not context.item.locked)
				end,
				'OnPress', function (self, gamepad)
					SpawnInventoryActionsSecondaryPopup(self, "give")
				end,
				'Text', T(299274125436, --[[XTemplate InventoryContextMenuMulti Text]] "GIVE ALL"),
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "OnShortcut(self, shortcut, source, ...)",
					'func', function (self, shortcut, source, ...)
						local node =  self:ResolveId("node")
						local context = node.context
						node = node.parent
						-- open sub menu
						if shortcut=="+ButtonA" then
							self:OnPress()
							return "break"
						end
						return XButton.OnShortcut(self, shortcut, source, ...)
					end,
				}),
				}),
			PlaceObj('XTemplateTemplate', {
				'comment', "give to squad",
				'__condition', function (parent, context)
					local ctx = context.context
					local sector_id 
					if IsKindOf(ctx, "SectorStash") then
						sector_id = ctx.sector_id
					else
						local unit_squad = context.unit and context.unit.Squad 
						sector_id = gv_Squads[unit_squad].CurrentSector
					end
					return #GetCurrentSectorPlayerSquads(sector_id) > 1 and not InventoryIsCombatMode()
				end,
				'__template', "ContextMenuButton",
				'Id', "giveToSquad",
				'FocusOrder', point(1, 2),
				'RelativeFocusOrder', "new-line",
				'OnContextUpdate', function (self, context, ...)
					self:SetEnabled(not context.item.locked)
				end,
				'OnPress', function (self, gamepad)
					SpawnInventoryActionsSecondaryPopup(self, "giveToSquad")
				end,
				'Text', T(214392570876, --[[XTemplate InventoryContextMenuMulti Text]] "GIVE ALL TO SQUAD"),
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "OnShortcut(self, shortcut, source, ...)",
					'func', function (self, shortcut, source, ...)
						local node =  self:ResolveId("node")
						local context = node.context
						node = node.parent
						-- open sub menu
						if shortcut=="+ButtonA" then
							self:OnPress()
							return "break"
						end
						return XButton.OnShortcut(self, shortcut, source, ...)
					end,
				}),
				}),
			PlaceObj('XTemplateTemplate', {
				'comment', "move to stash",
				'__condition', function (parent, context)
					if not context or not gv_SatelliteView then return end
					local obj = context.slot_wnd and context.slot_wnd:GetContext()
					if context.unit.Operation=="Arriving" then
						return false
					end	
					return obj and not (IsKindOf(obj, "Unit") and obj:IsDead()) and not IsKindOfClasses(obj, "SectorStash")
				end,
				'__template', "ContextMenuButton",
				'Id', "moveToStash",
				'FocusOrder', point(1, 2),
				'RelativeFocusOrder', "new-line",
				'OnPress', function (self, gamepad)
					PopupMoveItemsToStash(self)
				end,
				'Text', T(792196239069, --[[XTemplate InventoryContextMenuMulti Text]] "MOVE ALL TO STASH"),
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "OnShortcut(self, shortcut, source, ...)",
					'func', function (self, shortcut, source, ...)
						local node =  self:ResolveId("node")
						local context = node.context
						node = node.parent
						-- open sub menu
						if shortcut=="+ButtonA" then
							self:OnPress()
							return "break"
						end
						return XButton.OnShortcut(self, shortcut, source, ...)
					end,
				}),
				}),
			PlaceObj('XTemplateTemplate', {
				'comment', "unequip all",
				'__condition', function (parent, context) return context and context.slot_wnd and IsEquipSlot(context.slot_wnd.slot_name) end,
				'__template', "ContextMenuButton",
				'Id', "unequip",
				'FocusOrder', point(1, 2),
				'RelativeFocusOrder', "new-line",
				'OnPress', function (self, gamepad)
					local context = self.context
					for item, wnd_found in pairs(context.items) do
						if not item.locked then
							local slot = context.slot_wnd:GetInventorySlotCtrl()
							context.slot_wnd:UnEquipItem(item)
						end	
					end
				end,
				'Text', T(895463974021, --[[XTemplate InventoryContextMenuMulti Text]] "UNEQUIP ALL"),
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "OnShortcut(self, shortcut, source, ...)",
					'func', function (self, shortcut, source, ...)
						local node =  self:ResolveId("node")
						local context = node.context
						node = node.parent
						-- open sub menu
						if shortcut=="+ButtonA" then
							self:OnPress()
							return "break"
						end
						return XButton.OnShortcut(self, shortcut, source, ...)
					end,
				}),
				}),
			PlaceObj('XTemplateGroup', {
				'__condition', function (parent, context)
					if not context or not  InventoryIsContainerOnSameSector(context)  then return false end
					for item, wnd_found in pairs(context.items) do	
						if not item:IsKindOfClasses("Medkit", "FirstAidKit", "Reanimationsset") then
							return false
						end
					end
					return true
				end,
			}, {
				PlaceObj('XTemplateTemplate', {
					'comment', "salvage all",
					'__template', "ContextMenuButton",
					'Id', "salvage",
					'FocusOrder', point(1, 11),
					'OnContextUpdate', function (self, context, ...)
						self:SetEnabled(not context.item.locked)
					end,
					'OnPress', function (self, gamepad)
						local context = self:ResolveId("node").context
						if not context then return end
						
						CreateRealTimeThread(function()
							local popupHost = GetInGameInterface()
							local scrapPrompt = CreateQuestionBox(
								popupHost,
								T(129713192838, "Salvage"),
								T(332441866148, "This action will destroy all items. Are you sure?"),
								T(689884995409, "Yes"), 
								T(782927325160, "No"))
										
							local resp = scrapPrompt:Wait()
							if resp ~= "ok" then
								return
							else
								local unit = context.unit
								local container = context.context
								local slot_name = context.slot_wnd.slot_name
								local ids = {}
								for item, wnd_found in pairs(context.items) do	
									if not item.locked and item.Condition>=1 and AmountOfSalvagedMeds(item)>0 then
										if g_ItemIdToItem[item.id] then 
											ids[#ids+1] = item.id
										end	
									end
								end
								NetSquadBagAction(unit, container, slot_name, ids, gv_SquadBag, "salvage", 0)
								PlayFX("Scrap", "start", context.item)							
							end
						end)
						context.slot_wnd:ClosePopup()
					end,
					'Text', T(657246447710, --[[XTemplate InventoryContextMenuMulti Text]] "SALVAGE ALL"),
				}, {
					PlaceObj('XTemplateWindow', {
						'__class', "XText",
						'Margins', box(0, 0, 10, 0),
						'Dock', "right",
						'HandleMouse', false,
						'TextStyle', "SatelliteContextMenuText",
						'Translate', true,
						'TextHAlign', "right",
					}, {
						PlaceObj('XTemplateFunc', {
							'name', "Open(self)",
							'func', function (self)
								self:OnSetRollover(false)
								XText.Open(self)
							end,
						}),
						PlaceObj('XTemplateFunc', {
							'name', "OnSetRollover(self, rollover)",
							'func', function (self, rollover)
								local context = self.context
								self:SetTextStyle((rollover and self.enabled) and "SatelliteContextMenuTextRollover" or "SatelliteContextMenuText")
								
								local parts = 0
								for item, wnd_found in pairs(context.items) do	
									if not item.locked and item.Condition>1  then
										parts =  parts + AmountOfSalvagedMeds(item)
									end
								end	
								self:SetText(T{149255321468, "<parts> MEDS", parts = parts})
							end,
						}),
						}),
					}),
				PlaceObj('XTemplateTemplate', {
					'comment', "refill",
					'__template', "ContextMenuButton",
					'Id', "refill",
					'FocusOrder', point(1, 12),
					'OnContextUpdate', function (self, context, ...)
						local container = context.context
						local medsNeeded = 0
						for item, wnd_found in pairs(context.items) do	
							if not item.locked and item.Condition<item:GetMaxCondition()  then
								medsNeeded =  medsNeeded + AmountOfMedsToFill(item)
							end
						end	
						
						self:SetEnabled(medsNeeded>0 and HasItemInSquad(context.unit.session_id, "Meds", medsNeeded))
					end,
					'OnPress', function (self, gamepad)
						local context = self:ResolveId("node").context
						if not context then return end
						
						local unit = context.unit
						local container = context.context
						local slot_name = context.slot_wnd.slot_name
						local ids = {}
						for item, wnd_found in pairs(context.items) do	
							if not item.locked and item.Condition<item:GetMaxCondition() and  AmountOfMedsToFill(item)>0 then
								ids[#ids+1] = item.id
							end
						end	
						NetSquadBagAction(unit, container, slot_name, ids, gv_SquadBag, "refill", 0)
						PlayFX("RefillMeds", "start", context.item)							
						
						context.slot_wnd:ClosePopup()
					end,
					'Text', T(398115499148, --[[XTemplate InventoryContextMenuMulti Text]] "REFILL ALL"),
				}, {
					PlaceObj('XTemplateWindow', {
						'__class', "XText",
						'Margins', box(0, 0, 10, 0),
						'Dock', "right",
						'HandleMouse', false,
						'TextStyle', "SatelliteContextMenuText",
						'Translate', true,
						'TextHAlign', "right",
					}, {
						PlaceObj('XTemplateFunc', {
							'name', "Open(self)",
							'func', function (self)
								self:OnSetRollover(false)
								XText.Open(self)
							end,
						}),
						PlaceObj('XTemplateFunc', {
							'name', "OnSetRollover(self, rollover)",
							'func', function (self, rollover)
								local context = self.context
								self:SetTextStyle((rollover and self.enabled) and "SatelliteContextMenuTextRollover" or "SatelliteContextMenuText")
								
								local parts = 0
								for item, wnd_found in pairs(context.items) do	
									if not item.locked and item.Condition<item:GetMaxCondition()  then
										parts =  parts + AmountOfMedsToFill(item)
									end
								end	
								
								self:SetText(T{149255321468, "<parts> MEDS", parts = parts})
							end,
						}),
						}),
					}),
				}),
			PlaceObj('XTemplateTemplate', {
				'comment', "scrap all",
				'__condition', function (parent, context)
					if not (context and InventoryIsContainerOnSameSector(context)) then
						return false
					end	
					for item, wnd_found in pairs(context.items) do	
						if item:IsKindOfClasses("Medkit", "FirstAidKit", "Reanimationsset") or not item.ScrapParts or item.ScrapParts <= 0 then
							return false
						end
					end
					return true
				end,
				'__template', "ContextMenuButton",
				'Id', "scrap",
				'FocusOrder', point(1, 10),
				'OnPress', function (self, gamepad)
					local context = self:ResolveId("node").context
					if not context then return end
					
					CreateRealTimeThread(function()
						local popupHost = GetInGameInterface()
						local scrapPrompt = CreateQuestionBox(
							popupHost,
							T(271835460421, "Scrap"),
							T(332441866148, "This action will destroy all items. Are you sure?"),
							T(689884995409, "Yes"), 
							T(782927325160, "No"))
									
						local resp = scrapPrompt:Wait()
						if resp ~= "ok" then
							return
						else
							local unit = context.unit
							local container = context.context		
							local slot_name = context.slot_wnd.slot_name
							local ids = {}
							for item, wnd_found in pairs(context.items) do	
								if not item.locked and item.object_class~="Medicine" and item.ScrapParts and item.ScrapParts > 0 and g_ItemIdToItem[item.id] then
									ids[#ids+1] = item.id
								end
							end	
							NetSquadBagAction(unit, container, slot_name, ids, gv_SquadBag, "scrap", 0)
							PlayFX("Scrap", "start", context.item)							
						end
					end)
					context.slot_wnd:ClosePopup()
				end,
				'Text', T(628657472374, --[[XTemplate InventoryContextMenuMulti Text]] "SCRAP ALL"),
			}, {
				PlaceObj('XTemplateWindow', {
					'__class', "XText",
					'Margins', box(0, 0, 10, 0),
					'Dock', "right",
					'HandleMouse', false,
					'TextStyle', "SatelliteContextMenuText",
					'Translate', true,
					'TextHAlign', "right",
				}, {
					PlaceObj('XTemplateFunc', {
						'name', "Open(self)",
						'func', function (self)
							self:OnSetRollover(false)
							XText.Open(self)
						end,
					}),
					PlaceObj('XTemplateFunc', {
						'name', "OnSetRollover(self, rollover)",
						'func', function (self, rollover)
							local context = self.context
							self:SetTextStyle((rollover and self.enabled) and "SatelliteContextMenuTextRollover" or "SatelliteContextMenuText")
							
							local item = context.item
							local parts =0
							for item, wnd_found in pairs(context.items) do	
								if not item.locked and item.ScrapParts and  item.object_class~="Medicine"  then
									local amount =  item:AmountOfScrapPartsFromItem()
									if IsKindOf(item, "InventoryStack") then
										amount =  amount*item.Amount
									end
									parts =  parts +  amount
								end
							end	
							
							self:SetText(T{399084673498, "<parts> PARTS", parts = parts})
						end,
					}),
					}),
				}),
			PlaceObj('XTemplateTemplate', {
				'comment', "drop all",
				'__condition', function (parent, context)
					if not context or gv_SatelliteView then return end
					local obj = context.slot_wnd and context.slot_wnd:GetContext()
					if context.unit.Operation=="Arriving" then
						return false
					end	
					return obj and not (IsKindOf(obj, "Unit") and obj:IsDead()) and not IsKindOfClasses(obj, "ItemContainer", "SectorStash")
				end,
				'__template', "ContextMenuButton",
				'Id', "drop",
				'FocusOrder', point(1, 11),
				'OnContextUpdate', function (self, context, ...)
					local context = self:ResolveId("node").context
					if not context then return end
					
					local err 
					local unit = context.context
					if IsKindOf(unit, "UnitData") then
						local squad = unit.Squad and gv_Squads[unit.Squad]
						local sectorId = squad.CurrentSector
						if squad and (not sectorId or IsSquadTravelling(squad)) then
							err = T(687357008774, "Travelling")
						end
					end
					
					local actionName = T(692159353735, --[[XTemplate InventoryContextMenu Text]] "DROP ALL")
					if type(err) == "boolean" then
						self:SetText(actionName)
						self:SetEnabled(not err)
					elseif err then
						self:SetText(T{416109372392, "<actionName> (<err>)", actionName = actionName, err = err})
						self:SetEnabled(false)
					else
						self:SetText(actionName)
						self:SetEnabled(true)
					end
				end,
				'OnPress', function (self, gamepad)
					local context = self:ResolveId("node").context
					local unit = context.context
					if IsKindOf(unit, "UnitData") then
						return PopupMoveItemsToStash(self)
					end	
					context.slot_wnd:DropItems(context.items)
				end,
			}),
			PlaceObj('XTemplateTemplate', {
				'comment', "cash all",
				'__condition', function (parent, context)
					local slot_name = context.slot_wnd.slot_name
					if slot_name ~= "Inventory" and slot_name ~= "InventoryDead" then
							return false
						end
					for item, wnd_found in pairs(context.items) do
						if not IsKindOfClasses(item,  "Valuables","ValuablesStack") then 
							return false 
						end	
					end	
					return true
				end,
				'__template', "ContextMenuButton",
				'Id', "cashstack",
				'FocusOrder', point(1, 12),
				'OnPress', function (self, gamepad)
					local context = self:ResolveId("node").context
					if not context then return end
					
					CreateRealTimeThread(function()
						local prompt = CreateQuestionBox(
							terminal.desktop,
							T(727797864120, "Cash In"),
							T(332441866148, "This action will destroy all items. Are you sure?"),
							T(689884995409, "Yes"), 
							T(782927325160, "No"))
									
						local resp = prompt:Wait()
						if resp ~= "ok" then
							return
						end
						
						local unit = context.unit
						local container = context.context
						local slot_name = context.slot_wnd.slot_name
						local ids = {}
						for item, wnd_found in pairs(context.items) do
							if not item.locked and g_ItemIdToItem[item.id] then
								ids[#ids+1] = item.id
							end
						end	
						NetSquadBagAction(unit, container, slot_name, ids, false, "cashin", 0)
						PlayFX("Cashin", "start", context.item)							
					end)
					context.slot_wnd:ClosePopup()
				end,
				'Text', T(689959846866, --[[XTemplate InventoryContextMenuMulti Text]] "CASH in ALL"),
			}, {
				PlaceObj('XTemplateWindow', {
					'__class', "XText",
					'Margins', box(0, 0, 10, 0),
					'Dock', "right",
					'HandleMouse', false,
					'TextStyle', "SatelliteContextMenuText",
					'Translate', true,
					'TextHAlign', "right",
				}, {
					PlaceObj('XTemplateFunc', {
						'name', "Open(self)",
						'func', function (self)
							self:OnSetRollover(false)
							XText.Open(self)
						end,
					}),
					PlaceObj('XTemplateFunc', {
						'name', "OnSetRollover(self, rollover)",
						'func', function (self, rollover)
							local context = self.context
							self:SetTextStyle((rollover and self.enabled) and "SatelliteContextMenuTextRollover" or "SatelliteContextMenuText")
							
							local cost = 0
							for item, wnd_found in pairs(context.items) do	
									if not item.locked  and item.Cost then
										cost =  cost +  (IsKindOf(item, "InventoryStack")  and item.Amount*item.Cost or item.Cost)
								end
							end	
							
							self:SetText(T{397081877551, "<money(cost)>", cost = cost})
						end,
					}),
					}),
				}),
			}),
		PlaceObj('XTemplateWindow', {
			'comment', "title",
			'Dock', "top",
			'UseClipBox', false,
			'DrawOnTop', true,
			'Background', RGBA(52, 55, 61, 255),
		}, {
			PlaceObj('XTemplateWindow', {
				'__class', "XText",
				'Id', "idTitle",
				'Margins', box(10, 2, 0, 0),
				'HAlign', "left",
				'VAlign', "center",
				'Clip', false,
				'UseClipBox', false,
				'FoldWhenHidden', true,
				'HandleMouse', false,
				'TextStyle', "PDASectorInfo_Green",
				'Translate', true,
				'Text', T(508826239833, --[[XTemplate InventoryContextMenuMulti Text]] "Items Menu"),
				'TextVAlign', "center",
			}),
			}),
		PlaceObj('XTemplateFunc', {
			'name', "Open",
			'func', function (self, ...)
				self.spawned_subpopup = false
				ZuluContextMenu.Open(self)
				self:SetFocus()
				
				local buttons = self.idPopupWindow
				if #buttons<=0 then
					self:Close()
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "Close",
			'func', function (self, ...)
				if self.spawned_subpopup and self.spawned_subpopup.window_state ~= "destroying" then
					self.spawned_subpopup:Close()
				end
				
				return ZuluContextMenu.Close(self)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnShortcut(self, shortcut, source, ...)",
			'func', function (self, shortcut, source, ...)
				if shortcut == "Escape" or shortcut == "ButtonB" then
					if self.spawned_subpopup then
						self.spawned_subpopup:Close()
						self.spawned_subpopup = false
						return "break"
					end
				
					self:Close()
					return "break"
				end
				return ZuluContextMenu.OnShortcut(self, shortcut, source, ...)
			end,
		}),
		}),
})

