-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	__is_kind_of = "XButton",
	group = "Zulu",
	id = "SubSubMenuPresetBtn",
	PlaceObj('XTemplateWindow', {
		'__class', "XButton",
		'HAlign', "center",
		'VAlign', "center",
		'MinWidth', 320,
		'MaxWidth', 320,
		'BorderColor', RGBA(0, 0, 0, 0),
		'Background', RGBA(255, 255, 255, 0),
		'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
		'ChildrenHandleMouse', true,
		'OnContextUpdate', function (self, context, ...)
			self:OnSetRollover()
		end,
		'FXPress', "MainMenuButtonClick",
		'FocusedBorderColor', RGBA(0, 0, 0, 0),
		'FocusedBackground', RGBA(255, 255, 255, 0),
		'DisabledBorderColor', RGBA(0, 0, 0, 0),
		'PressedBackground', RGBA(255, 255, 255, 0),
	}, {
		PlaceObj('XTemplateWindow', {
			'Id', "idTextField",
		}, {
			PlaceObj('XTemplateWindow', {
				'__condition', function (parent, context) return not GetDialog("PDADialog") end,
				'__class', "XBlurRect",
				'Margins', box(5, 5, 3, 5),
				'Dock', "box",
				'BlurRadius', 10,
				'Mask', "UI/Common/mm_panel",
			}),
			PlaceObj('XTemplateWindow', {
				'__class', "XFrame",
				'Id', "idEffect",
				'Margins', box(5, 5, 5, 5),
				'Dock', "box",
				'Transparency', 179,
				'HandleKeyboard', false,
				'Image', "UI/Common/screen_effect",
				'ImageScale', point(100000, 1000),
				'TileFrame', true,
				'SqueezeX', false,
				'SqueezeY', false,
			}),
			PlaceObj('XTemplateWindow', {
				'__class', "XFrame",
				'UIEffectModifierId', "MainMenuMainBar",
				'Id', "idImg",
				'Dock', "box",
				'Transparency', 64,
				'HandleKeyboard', false,
				'Image', "UI/Common/mm_panel",
				'FrameBox', box(50, 0, 50, 0),
				'SqueezeX', false,
				'SqueezeY', false,
			}),
			PlaceObj('XTemplateWindow', {
				'__class', "XFrame",
				'UIEffectModifierId', "MainMenuHighlight",
				'Id', "idImgBcgr",
				'ZOrder', 2,
				'Dock', "box",
				'Transparency', 255,
				'HandleKeyboard', false,
				'Image', "UI/Common/mm_panel_selected",
				'FrameBox', box(50, 0, 50, 0),
				'SqueezeX', false,
				'SqueezeY', false,
			}),
			PlaceObj('XTemplateWindow', {
				'comment', "text on button",
				'__class', "AutoFitText",
				'Id', "idBtnText",
				'ZOrder', 3,
				'Margins', box(3, 0, 10, 0),
				'Dock', "box",
				'HAlign', "center",
				'VAlign', "center",
				'MinWidth', 180,
				'MaxWidth', 180,
				'Clip', false,
				'BorderColor', RGBA(0, 0, 0, 0),
				'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
				'HandleKeyboard', false,
				'HandleMouse', false,
				'FocusedBorderColor', RGBA(0, 0, 0, 0),
				'DisabledBorderColor', RGBA(0, 0, 0, 0),
				'TextStyle', "MMOptionEntry",
				'Translate', true,
				'TextHAlign', "center",
				'TextVAlign', "center",
			}),
			PlaceObj('XTemplateWindow', {
				'__context', function (parent, context) return true and context end,
				'__condition', function (parent, context) return not context.input_field and context.id ~= "default" end,
				'__class', "XImage",
				'Id', "idDelete",
				'Margins', box(0, 0, 20, 0),
				'Dock', "box",
				'HAlign', "right",
				'VAlign', "center",
				'DrawOnTop', true,
				'Background', RGBA(87, 91, 71, 64),
				'HandleMouse', true,
				'Image', "UI/PDA/Quest/X.png",
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "OnMouseButtonDown(self, pos, button)",
					'func', function (self, pos, button)
						if button == "L" then
							CreateRealTimeThread(function()
								if WaitQuestion(
										terminal.desktop, 
										T(137802317861, "Warning"), 
										T{468316262414, "Are you sure you want to delete <em><u(name)></em>?", name = self.parent.parent:GetName()}, 
										T(1138, "Yes"), 
										T(920129565424, "No")
								) == "ok" then
									local id = self.parent.parent.context.id
									DeleteModPreset(id)
									if LocalStorage.LastSelectedModPreset and LocalStorage.LastSelectedModPreset == id then
										SelectModPreset("Default")
									end
									if g_ModsUIContextObj then
										g_ModsUIContextObj:GetInstalledMods()
									end
									ObjModified("tags")
									ObjModified("presets")
									ObjModified(LocalStorage.ModPresets)
								end
							end)
							return "break"
						end
					end,
				}),
				}),
			}),
		PlaceObj('XTemplateWindow', {
			'__class', "XTextEditor",
			'Id', "idInputField",
			'IdNode', true,
			'Margins', box(5, 0, 5, 0),
			'BorderWidth', 3,
			'Padding', box(15, 5, 5, 5),
			'HAlign', "center",
			'VAlign', "center",
			'MinWidth', 300,
			'MaxWidth', 300,
			'Visible', false,
			'FoldWhenHidden', true,
			'DrawOnTop', true,
			'BorderColor', RGBA(215, 159, 80, 255),
			'Background', RGBA(88, 92, 68, 255),
			'BackgroundRectGlowSize', 2,
			'BackgroundRectGlowColor', RGBA(0, 0, 0, 127),
			'FocusedBorderColor', RGBA(215, 159, 80, 255),
			'FocusedBackground', RGBA(88, 92, 68, 255),
			'DisabledBorderColor', RGBA(128, 128, 128, 0),
			'DisabledBackground', RGBA(0, 0, 0, 255),
			'TextStyle', "MMNewGameName",
			'OnTextChanged', function (self)
				if GetUIStyleGamepad() then
					self:OnKillFocus(false, "createNew")
				end
				PlayFX("Typing", "start")
			end,
			'ConsoleKeyboardDescription', T(624180130898, --[[XTemplate SubSubMenuPresetBtn ConsoleKeyboardDescription]] "Create New Mod Preset"),
			'WordWrap', false,
			'AllowPaste', false,
			'AllowEscape', false,
			'MaxVisibleLines', 1,
			'MaxLines', 1,
			'MaxLen', 14,
			'HintColor', RGBA(0, 0, 0, 0),
			'SelectionBackground', RGBA(124, 130, 96, 255),
		}, {
			PlaceObj('XTemplateFunc', {
				'name', "OnKillFocus(self, new_focus, createPreset)",
				'func', function (self, new_focus, createPreset)
					CreateRealTimeThread(function()
						Sleep(0)
						while g_ZuluMessagePopup and #g_ZuluMessagePopup > 1 do
							WaitMsg("ZuluMessagePopup", 100)
						end
						
						if self.parent then
							if createPreset and self:GetText() ~= "" then
									local ok, err = CreateModPreset(self:GetText())
									if ok then
										SelectModPreset(self:GetText())
										if g_ModsUIContextObj then
											g_ModsUIContextObj:GetInstalledMods()
										end
									else
										WaitMessage(terminal.desktop,
											T(137802317861, "Warning"),
											T{821375521775, "<err>", err = err},
											T(413525748743, "Ok"))
									end
								end
							GetDialog(self).parent:SetHandleMouse(false)
							self.parent:SetEditing(false)
							self:LockScrollWhileEdit(false)
							self:SetText("")
							ObjModified(LocalStorage.ModPresets)
							XTextEditor.OnKillFocus(self)
						end
					end)
				end,
			}),
			PlaceObj('XTemplateFunc', {
				'name', "OnShortcut(self, shortcut, source, ...)",
				'func', function (self, shortcut, source, ...)
					if shortcut == "Escape" or GetUIStyleGamepad() then
						self:OnKillFocus(self)
						return "break"
					elseif shortcut == "Enter" then
						self:OnKillFocus(nil, "createPreset")
						return "break"
					else
						XTextEditor.OnShortcut(self, shortcut, source, ...)
					end
				end,
			}),
			PlaceObj('XTemplateFunc', {
				'name', "OnSetFocus(self)",
				'func', function (self)
					XTextEditor.OnSetFocus(self)
					self:LockScrollWhileEdit(true)
				end,
			}),
			PlaceObj('XTemplateFunc', {
				'name', "LockScrollWhileEdit(self, lock)",
				'func', function (self, lock)
					local contentTemplate = GetDialog(self)
					contentTemplate:ResolveValue("idItemsScrollArea"):SetMouseScroll(not lock)
					contentTemplate:ResolveValue("idItemsScroll"):SetHandleMouse(not lock)
					contentTemplate:ResolveValue("idItemsScroll"):SetHandleKeyboard(not lock)
				end,
			}),
			}),
		PlaceObj('XTemplateFunc', {
			'name', "OnSetRollover(self, rollover)",
			'func', function (self, rollover)
				if not self.context then return end
				if self.context.input_field then
					self.idBtnText:SetTextStyle(rollover and "MMOptionEntryHighlight" or "MMOptionEntryValue")
				elseif self.context.id == LocalStorage.LastSelectedModPreset then
					self.idBtnText:SetTextStyle(rollover and "MMOptionEntryHighlight" or "MMOptionEntry")
					if self.idDelete then
						self.idDelete:SetImageColor(rollover and RGB(0, 0, 0) or RGB(255,255,255))
						self.idDelete:SetBackground(rollover and RGBA(124,130,96,153) or RGBA(124,130,96,64))
					end
				else
					self.idBtnText:SetTextStyle(rollover and "MMOptionEntryHighlight" or "MMTagDisabled")
					if self.idDelete then
						self.idDelete:SetImageColor(rollover and RGB(0, 0, 0) or RGB(255,255,255))
						self.idDelete:SetBackground(rollover and RGBA(124,130,96,153) or RGBA(124,130,96,64))
					end
				end
				if rollover then 
					PlayFX("MainMenuButtonRollover") 
					self.idImgBcgr:SetTransparency(0, 150)
				else
					self.idImgBcgr:SetTransparency(255,150)
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnMouseButtonDown(self, pos, button)",
			'func', function (self, pos, button)
				if button == "L" then
					if not self.context or self:GetEditing() then return end
					
					if self.context.input_field then
						if GetUIStyleGamepad() then
							self.idInputField:OpenControllerTextInput()
						else
							self:SetEditing(true)
						end
					else
						SelectModPreset(self.context.id)
						if g_ModsUIContextObj then
							g_ModsUIContextObj:GetInstalledMods()
							UpdateModsCount(GetDialog(self))
						end
					end
					
					for _, btn in ipairs(self.parent) do
						if btn.context ~= self.context then
							btn:OnSetRollover(false)
							if btn.idInputField:IsVisible() then
								btn.idInputField:OnKillFocus(self)
							end
						end
					end
					ObjModified("tags")
					ObjModified("presets")
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnShortcut(self, shortcut, source, ...)",
			'func', function (self, shortcut, source, ...)
				if not self:GetEditing() then
					if  shortcut == "ButtonA" then
						self:OnMouseButtonDown(nil, "L")
					elseif shortcut == "ButtonY" then
						self.idDelete:OnMouseButtonDown(nil, "L")
					end
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "SetSelected(self, selected)",
			'func', function (self, selected)
				if selected and GetUIStyleGamepad() then
					self:SetFocus(selected)
					g_FocusedModPreset = self
					ObjModified("NewSelectedMod")
				end
			end,
		}),
		}),
	PlaceObj('XTemplateProperty', {
		'category', "General",
		'id', "Name",
		'editor', "text",
		'Set', function (self, value)
			self.idBtnText:SetText(value)
		end,
		'Get', function (self)
			return self.idBtnText:GetText()
		end,
		'name', T(996943991059, --[[XTemplate SubSubMenuPresetBtn name]] "Tag Name"),
	}),
	PlaceObj('XTemplateProperty', {
		'id', "Editing",
		'Set', function (self, value)
			self.Editing = value
			
			if value then
				GetDialog(self).parent:SetHandleMouse(true)
			end
			
			self.idTextField:SetVisible(not value)
			--self.idTextField:SetFocus(not value)
			self.idInputField:SetVisible(value)
			self.idInputField:SetFocus(value)
		end,
		'Get', function (self)
			return self.Editing
		end,
	}),
})

