-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	__is_kind_of = "XContextWindow",
	group = "Zulu Satellite UI",
	id = "SquadsAndMercs",
	PlaceObj('XTemplateWindow', {
		'__class', "SquadsAndMercsClass",
		'Id', "idPartyContainer",
		'HAlign', "left",
		'VAlign', "top",
	}, {
		PlaceObj('XTemplateWindow', {
			'__class', "XContextWindow",
			'Dock', "top",
		}, {
			PlaceObj('XTemplateWindow', {
				'__context', function (parent, context)
					return context
				end,
				'__class', "XContextWindow",
				'Id', "idTitle",
				'Margins', box(-10, -5, 0, 0),
				'VAlign', "top",
				'LayoutMethod', "VList",
				'ContextUpdateOnOpen', true,
				'OnContextUpdate', function (self, context, ...)
					local node = self:ResolveId("node")
					local selectedSquad = node.selected_squad
					local nameWnd = node.idName
					nameWnd:SetContext(selectedSquad)
					nameWnd:SetText(T{183209563903, "<u(Name)> [<u(SquadMemberCount())>]", selectedSquad})
					
					local moraleUI = self:ResolveId("idMorale")
					
					local selScale = point(670, 670)
					local unSelScale = point(670, 670)
					local transSel = 0
					local transUnSel = 100
					for i, sB in ipairs(node.idSquadButtons) do
						if sB == moraleUI then goto continue end
					
						local selected = sB.context and sB.context.UniqueId == g_CurrentSquad
						
						sB.OnSetRollover = function(s, r)
							if not selected then
								s:SetTransparency(r and 0 or transUnSel)
							end
						end
						
						if not sB.idSelected then goto continue end
						
						sB.idSelected:SetVisible(selected)
						sB:SetTransparency(selected and transSel or transUnSel)
						sB:SetScaleModifier(selected and selScale or unSelScale)
						
						::continue::
					end
				end,
			}, {
				PlaceObj('XTemplateWindow', {
					'__context', function (parent, context)
						return context
					end,
					'__class', "XText",
					'Id', "idName",
					'Margins', box(5, 0, 0, 0),
					'Clip', false,
					'UseClipBox', false,
					'TextStyle', "PartyUISelectedSquad",
					'OnContextUpdate', function (self, context, ...)
						local limit = self.UpdateTimeLimit
						if limit == 0 or (RealTime() - self.last_update_time) >= limit then
							self:SetText(self.Text)
						elseif not self:GetThread("ContextUpdate") then
							self:CreateThread("ContextUpdate", function(self)
								Sleep(self.last_update_time + self.UpdateTimeLimit - RealTime())
								self:OnContextUpdate()
							end, self)
						end
					end,
					'Translate', true,
				}),
				PlaceObj('XTemplateWindow', {
					'Id', "idSquadButtons",
					'LayoutMethod', "HList",
					'LayoutHSpacing', -10,
				}, {
					PlaceObj('XTemplateWindow', {
						'comment', "morale icon container",
						'__context', function (parent, context) return Selection end,
						'__condition', function (parent, context) return IsKindOf(GetDialog(parent), "IModeCommonUnitControl") or IsKindOf(GetDialog(parent), "IModeDeployment") end,
						'__class', "XContextWindow",
						'RolloverTemplate', "RolloverGeneric",
						'RolloverTitle', T(695061456619, --[[XTemplate SquadsAndMercs RolloverTitle]] "Morale"),
						'Id', "idMorale",
						'Margins', box(7, 1, 0, 0),
						'Dock', "left",
						'VAlign', "top",
						'FoldWhenHidden', true,
						'BackgroundRectGlowSize', 1,
						'BackgroundRectGlowColor', RGBA(32, 35, 47, 255),
						'HandleMouse', true,
						'MouseCursor', "UI/Cursors/Hand.tga",
						'ContextUpdateOnOpen', true,
						'OnContextUpdate', function (self, context, ...)
							local icon = self:ResolveId("idMoraleIcon")
							local team = GetPoVTeam()
							local morale = team and team.morale or 0
							
							local text = self:ResolveId("idMoraleText")
							text:SetText(morale)
							text:SetVisible(morale ~= 0)
							
							--icon:SetImage(MoraleLevelIcon[morale])
							if team then
								self:SetRolloverText(team:GetMoraleLevelAndEffectsText())
								self.OnMouseButtonDown = function() return "break" end
							end
							self:SetVisible(not not g_Combat)
						end,
					}, {
						PlaceObj('XTemplateWindow', {
							'BorderWidth', 2,
							'MinWidth', 80,
							'MinHeight', 46,
							'MaxWidth', 80,
							'MaxHeight', 46,
							'BorderColor', RGBA(52, 55, 61, 230),
							'Background', RGBA(32, 35, 47, 215),
						}, {
							PlaceObj('XTemplateWindow', {
								'comment', "morale indicator",
								'__class', "XImage",
								'RolloverTemplate', "RolloverGeneric",
								'RolloverOffset', box(10, 0, 0, 0),
								'RolloverTitle', T(410859376283, --[[XTemplate SquadsAndMercs RolloverTitle]] "Morale"),
								'Id', "idMoraleIcon",
								'IdNode', false,
								'HAlign', "center",
								'VAlign', "center",
								'Image', "UI/Hud/morale_normal",
							}, {
								PlaceObj('XTemplateWindow', {
									'__class', "XText",
									'Id', "idMoraleText",
									'Margins', box(-2, -2, 0, 0),
									'HAlign', "center",
									'VAlign', "center",
									'TextStyle', "PartyUIMoraleText",
								}),
								}),
							}),
						}),
					PlaceObj('XTemplateForEach', {
						'__context', function (parent, context, item, i, n) return item end,
						'run_after', function (child, context, item, i, n, last)
							local image = item.image or "UI/Icons/SquadLogo/squad_logo_01"
							child.idSquadIcon:SetImage(image .. "_s")
							child.drop_reason = false
						end,
					}, {
						PlaceObj('XTemplateWindow', {
							'__condition', function (parent, context) return GetDialog(GetDialog(parent).parent) ~= GetDialog("FullscreenGameDialogs") end,
							'__class', "XButton",
							'VAlign', "top",
							'BorderColor', RGBA(0, 0, 0, 0),
							'Background', RGBA(0, 0, 0, 0),
							'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
							'OnContextUpdate', function (self, context, ...)
								
							end,
							'FocusedBorderColor', RGBA(0, 0, 0, 0),
							'FocusedBackground', RGBA(0, 0, 0, 0),
							'DisabledBorderColor', RGBA(0, 0, 0, 0),
							'OnPress', function (self, gamepad)
								local dlg = GetDialog(self)
								local deploymentOrCommonUnit = IsKindOf(dlg, "IModeCommonUnitControl") or
									   														IsKindOf(dlg, "IModeDeployment")
								
								if deploymentOrCommonUnit and self.context.UniqueId == g_CurrentSquad then
									ToggleAllUnitsSelectionInSquad(true)
								else
									local node = self:ResolveId("node")
									node:SelectSquad(self.context)
									ObjModified(self.context)
								end
							end,
							'RolloverBackground', RGBA(0, 0, 0, 0),
							'PressedBackground', RGBA(0, 0, 0, 0),
						}, {
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Image', "UI/Icons/SateliteView/merc_squad_2",
							}),
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Id', "idSquadIcon",
								'Margins', box(0, 4, 0, 0),
								'HAlign', "center",
								'VAlign', "top",
								'ScaleModifier', point(800, 800),
							}),
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Id', "idSelected",
								'HAlign', "center",
								'VAlign', "center",
								'Visible', false,
								'Image', "UI/Icons/SateliteView/squad_selection",
							}),
							PlaceObj('XTemplateFunc', {
								'name', "OnMouseButtonDoubleClick(self, pt, button)",
								'func', function (self, pt, button)
									if not IsKindOf(GetDialog(self), "XSatelliteDialog") then return end
									
									local squad = self.context
									SatelliteSetCameraDest(squad.CurrentSector, 300)
								end,
							}),
							}),
						PlaceObj('XTemplateWindow', {
							'comment', "inventory",
							'__condition', function (parent, context) return GetDialog(GetDialog(parent).parent) == GetDialog("FullscreenGameDialogs") end,
							'__class', "XButton",
							'VAlign', "top",
							'BorderColor', RGBA(0, 0, 0, 0),
							'Background', RGBA(0, 0, 0, 0),
							'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
							'OnContextUpdate', function (self, context, ...)
								
							end,
							'FocusedBorderColor', RGBA(0, 0, 0, 0),
							'FocusedBackground', RGBA(0, 0, 0, 0),
							'DisabledBorderColor', RGBA(0, 0, 0, 0),
							'OnPress', function (self, gamepad)
								local dlg = GetDialog(self)
								InventoryClosePopup(dlg)
								local deploymentOrCommonUnit = IsKindOf(dlg, "IModeCommonUnitControl") or
									   														IsKindOf(dlg, "IModeDeployment")
								
								if deploymentOrCommonUnit and self.context.UniqueId == g_CurrentSquad then
									ToggleAllUnitsSelectionInSquad(true)
								else
									local node = self:ResolveId("node")
									node:SelectSquad(self.context)
									ObjModified(self.context)
								end
							end,
							'RolloverBackground', RGBA(0, 0, 0, 0),
							'PressedBackground', RGBA(0, 0, 0, 0),
						}, {
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Image', "UI/Icons/SateliteView/merc_squad_2",
							}),
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Id', "idSquadIcon",
								'Margins', box(0, 4, 0, 0),
								'HAlign', "center",
								'VAlign', "top",
								'ScaleModifier', point(800, 800),
							}),
							PlaceObj('XTemplateWindow', {
								'__class', "XImage",
								'Id', "idSelected",
								'HAlign', "center",
								'VAlign', "center",
								'Visible', false,
								'Image', "UI/Icons/SateliteView/squad_selection",
							}),
							PlaceObj('XTemplateFunc', {
								'name', "OnMouseButtonDoubleClick(self, pt, button)",
								'func', function (self, pt, button)
									if not IsKindOf(GetDialog(self), "XSatelliteDialog") then return end
									
									local squad = self.context
									SatelliteSetCameraDest(squad.CurrentSector, 300)
								end,
							}),
							PlaceObj('XTemplateFunc', {
								'name', "IsDropTarget(self, draw_win, pt)",
								'func', function (self, draw_win, pt)
									if InventoryIsCombatMode() 
										or not InventoryStartDragContext 
										or InventoryStartDragContext.Squad == self.context.UniqueId 
									then
										return false
									end										
									local cur_sector
									if IsKindOf(InventoryStartDragContext, "SectorStash") then
										cur_sector = InventoryStartDragContext.sector_id
									elseif IsKindOf(InventoryStartDragContext, "ItemContainer") then	
										cur_sector = self:GetContext().CurrentSector
									else									
										local squad_id = IsKindOf(InventoryStartDragContext, "SquadBag") and InventoryStartDragContext.squad_id or InventoryStartDragContext.Squad
										cur_sector = squad_id and gv_Squads[squad_id].CurrentSector or self.context.CurrentSector
									end
									local drag_sector = self.context.CurrentSector
									return cur_sector==drag_sector
								end,
							}),
							PlaceObj('XTemplateFunc', {
								'name', "OnDropEnter(self, draw_win, pt, drag_source)",
								'func', function (self, draw_win, pt, drag_source)
									self:SetRollover(true)
									local squad = self:GetContext()
									local mouse_text 
									mouse_text =  T{386181237071, "Give to <merc>",merc = squad.Name}
									local r1 = InventoryDropMoveItemsToSquad(squad, "check_only")
									self.drop_reason = r1 or "ok" 
									if r1 then
										mouse_text = mouse_text.."\n".. Untranslated("<style InventoryHintTextRed>")..T(719913116871, "Not enough space")										
									end
									InventoryShowMouseText(not not mouse_text,mouse_text)
								end,
							}),
							PlaceObj('XTemplateFunc', {
								'name', "OnDropLeave(self, drag_win)",
								'func', function (self, drag_win)
									self:SetRollover(false)
									InventoryShowMouseText(false)
									self.drop_reason = false
								end,
							}),
							PlaceObj('XTemplateFunc', {
								'name', "OnDrop(self, drag_win, pt, drag_source_win)",
								'func', function (self, drag_win, pt, drag_source_win)
									self.drop_reason = self.drop_reason or InventoryDropMoveItemsToSquad(self.context, "check_only")
									if self.drop_reason=="ok" then 	
										InventoryDropMoveItemsToSquad(self.context)
										self.drop_reason = false
									end
									return "not valid target"
								end,
							}),
							}),
						}),
					PlaceObj('XTemplateWindow', {
						'comment', "add squad",
						'__condition', function (parent, context) return not IsKindOf(GetDialog(parent), "IModeDeployment") and not (GetDialog(GetDialog(parent).parent) == GetDialog("FullscreenGameDialogs")) end,
						'__class', "XButton",
						'VAlign', "top",
						'ScaleModifier', point(666, 666),
						'BorderColor', RGBA(0, 0, 0, 0),
						'Background', RGBA(0, 0, 0, 0),
						'BackgroundRectGlowColor', RGBA(0, 0, 0, 0),
						'Transparency', 100,
						'FocusedBorderColor', RGBA(0, 0, 0, 0),
						'FocusedBackground', RGBA(0, 0, 0, 0),
						'DisabledBorderColor', RGBA(0, 0, 0, 0),
						'OnPress', function (self, gamepad)
							InvokeShortcutAction(GetDialog("PDADialogSatellite"), "idSquadManagement", false, true)
						end,
						'RolloverBackground', RGBA(0, 0, 0, 0),
						'PressedBackground', RGBA(0, 0, 0, 0),
					}, {
						PlaceObj('XTemplateWindow', {
							'__class', "XImage",
							'Image', "UI/Icons/SateliteView/merc_squad_add_2",
						}),
						}),
					}),
				}),
			}),
		PlaceObj('XTemplateWindow', {
			'__class', "XFitContent",
			'IdNode', false,
			'Dock', "box",
			'Fit', "height",
		}, {
			PlaceObj('XTemplateWindow', {
				'comment', "Mercs Themselves (Updates on Sel Squad Change)",
				'__context', function (parent, context) return parent.parent.selected_squad end,
				'__class', "XContentTemplate",
				'Id', "idParty",
				'HAlign', "left",
				'VAlign', "top",
				'LayoutMethod', "VList",
			}, {
				PlaceObj('XTemplateWindow', {
					'Margins', box(0, 0, 25, 0),
					'Dock', "box",
					'HandleMouse', true,
				}, {
					PlaceObj('XTemplateFunc', {
						'name', "OnMouseButtonDown(self, pos, button)",
						'func', function (self, pos, button)
							-- click eater for misclick prevention
							return "break"
						end,
					}),
					}),
				PlaceObj('XTemplateWindow', {
					'Id', "idContainer",
					'LayoutMethod', "VList",
					'LayoutVSpacing', 3,
					'UseClipBox', false,
					'BorderColor', RGBA(0, 0, 0, 0),
				}, {
					PlaceObj('XTemplateGroup', {
						'__condition', function (parent, context) return context and IsKindOf(GetDialog(parent), "XSatelliteDialog") end,
					}, {
						PlaceObj('XTemplateForEach', {
							'comment', "Mercs in the Current Team",
							'array', function (parent, context) return context and context.units end,
							'__context', function (parent, context, item, i, n) return gv_UnitData[item] end,
						}, {
							PlaceObj('XTemplateTemplate', {
								'__template', "HUDMerc",
								'OnContextUpdate', function (self, context, ...)
									self.idOperationContainer.idProgressBarContainer:SetVisible(context.Operation~="Idle")
								end,
								'FXMouseIn', "MercPortraitRolloverPDA",
								'FXPress', "MercPortraitPressPDA",
								'OnPress', function (self, gamepad)
									local prev
									if g_SatelliteUI.context_menu then
										local prev_context = g_SatelliteUI.context_menu[1].context
										prev = prev_context and prev_context.unit_id
										g_SatelliteUI:RemoveContextMenu()
									end
								end,
								'AltPress', true,
								'OnAltPress', function (self, gamepad)
									local prev
									if g_SatelliteUI.context_menu then
										local prev_context = g_SatelliteUI.context_menu[1].context
										prev = prev_context and prev_context.unit_id
										g_SatelliteUI:RemoveContextMenu()
									end
									local unit = self.context
									if prev and prev==unit.session_id then
										return
									end	
									local squad_id = unit.Squad
									local squad = gv_Squads[squad_id]
									local sector_id = squad and squad.CurrentSector
									if not sector_id then
										return
									end	
									self:SetRollover(false)
									g_SatelliteUI:OpenContextMenu(self, sector_id, unit.Squad, unit.session_id)
								end,
								'ClassIconOnRollover', true,
							}, {
								PlaceObj('XTemplateFunc', {
									'name', "OnMouseButtonDoubleClick(self, pt, button)",
									'func', function (self, pt, button)
										local selectedUnit = self.context
										if not IsKindOf(selectedUnit, "UnitData") or not g_SatelliteUI then return end
										
										local squad = selectedUnit.Squad
										squad = squad and gv_Squads[squad]
										SatelliteSetCameraDest(squad.CurrentSector, 300)
									end,
								}),
								PlaceObj('XTemplateWindow', {
									'comment', "context menu observer",
									'__context', function (parent, context) return "satellite_context_menu" end,
									'__class', "XContextWindow",
									'ContextUpdateOnOpen', true,
									'OnContextUpdate', function (self, context, ...)
										local hasMenu = g_SatelliteUI and g_SatelliteUI.context_menu
										hasMenu = hasMenu and hasMenu.window_state ~= "destroying" and hasMenu.idContent
										local isOnMe = hasMenu and hasMenu.context.unit_id == self.parent.context.session_id
										self.parent:SetSelected(isOnMe)
									end,
								}),
								PlaceObj('XTemplateWindow', {
									'HAlign', "right",
									'MaxHeight', 105,
									'LayoutMethod', "VList",
								}, {
									PlaceObj('XTemplateWindow', {
										'comment', "only shows wounded and tired effect",
										'__context', function (parent, context) return context.StatusEffects end,
										'__class', "XContentTemplate",
										'Id', "idStatusEffectsContainer",
										'Margins', box(-3, 5, 0, 0),
										'Dock', "top",
										'HAlign', "left",
										'VAlign', "top",
										'MaxHeight', 80,
										'LayoutMethod', "VList",
										'LayoutVSpacing', -2,
										'UseClipBox', false,
										'FoldWhenHidden', true,
										'HandleMouse', true,
										'MouseCursor', "UI/Cursors/Cursor.tga",
									}, {
										PlaceObj('XTemplateForEach', {
											'comment', "status effect",
											'array', function (parent, context) return table.ifilter(context or empty_table, "ShownSatelliteView") end,
											'__context', function (parent, context, item, i, n) return item end,
										}, {
											PlaceObj('XTemplateTemplate', {
												'__template', "StatusEffectIcon",
											}),
											}),
										PlaceObj('XTemplateFunc', {
											'name', "OnMouseButtonDown(self, pos, button)",
											'func', function (self, pos, button)
												return "break"
											end,
										}),
										PlaceObj('XTemplateTemplate', {
											'comment', "contract warning",
											'__context', function (parent, context) return parent:ResolveId("node").context end,
											'__template', "MercContractWarningIcon",
											'Dock', "left",
										}),
										}),
									PlaceObj('XTemplateWindow', {
										'Dock', "bottom",
										'HAlign', "left",
										'VAlign', "bottom",
										'LayoutMethod', "VList",
										'LayoutVSpacing', 2,
									}, {
										PlaceObj('XTemplateWindow', {
											'__class', "XButton",
											'RolloverTemplate', "PDAOperationRollover",
											'RolloverAnchor', "right",
											'RolloverAnchorId', "idContent",
											'RolloverText', T(502410419676, --[[XTemplate SquadsAndMercs RolloverText]] "placeholder"),
											'Id', "idOperationContainer",
											'Margins', box(-5, 4, 0, 0),
											'Dock', "bottom",
											'HAlign', "left",
											'VAlign', "bottom",
											'MinWidth', 30,
											'MinHeight', 30,
											'MaxWidth', 30,
											'MaxHeight', 30,
											'Background', RGBA(30, 37, 47, 255),
											'BackgroundRectGlowSize', 1,
											'BackgroundRectGlowColor', RGBA(30, 37, 47, 255),
											'OnContextUpdate', function (self, context, ...)
												local sector = context:GetSector()
												self:SetVisible(true)
												local operation_id = self.context.Operation
												local is_operation_started = operation_id=="Idle" or operation_id=="Traveling" or operation_id=="Arriving" or sector and sector.started_operations and sector.started_operations[operation_id]
												
												if not is_operation_started then
													self:SetVisible(false)
													return
												end
												local operation = SectorOperations[self.context.Operation]
												local icon = operation and operation.icon or ""
												if self.idOperation.Image ~= icon then
													self.idOperation:SetImage(icon)
												end
												self.idOperation:SetImageColor(GameColors.J)
												-- Released merc.
												if not context.Squad then return end
																							
												-- top parts are 1/8; side and bottom - 1/4
												local progress_top_left, progress_top_right, progress_left, progress_right, progress_bottom = 0, 0, 0, 0, 0
												local max_progress = context.OperationInitialETA or 0
												if max_progress > 0 then
													local current = max_progress -  GetOperationTimerETA(context, "prediction")--GetOperationTimeLeft(context, context.Operation)
													local perc = MulDivRound(current or 0, 100, max_progress)
													progress_top_right = Min(perc, 12)
													perc = Max(perc - progress_top_right, 0)
													progress_right = Min(perc, 25)
													perc = Max(perc - progress_right, 0)
													progress_bottom = Min(perc, 25)
													perc = Max(perc - progress_bottom, 0)
													progress_left = Min(perc, 25)
													perc = Max(perc - progress_left, 0)
													progress_top_left = Min(perc, 13)
												end
												self.idTopLeft:SetProgress(progress_top_left)
												self.idTopRight:SetProgress(progress_top_right)
												self.idLeft:SetProgress(progress_left)
												self.idRight:SetProgress(progress_right)
												self.idBottom:SetProgress(progress_bottom)
											end,
											'FocusedBackground', RGBA(30, 37, 47, 255),
											'OnPress', function (self, gamepad)
												InvokeShortcutAction(false, "idOperations")
											end,
											'RolloverBackground', RGBA(30, 37, 47, 255),
											'PressedBackground', RGBA(30, 37, 47, 255),
										}, {
											PlaceObj('XTemplateWindow', {
												'comment', "operation icon",
												'__class', "XImage",
												'Id', "idOperation",
												'HAlign', "center",
												'VAlign', "center",
												'MinWidth', 24,
												'MinHeight', 24,
												'MaxWidth', 24,
												'MaxHeight', 24,
												'Image', "UI/Icons/unknown_add",
												'ImageFit', "stretch",
												'ImageColor', RGBA(61, 122, 153, 255),
											}),
											PlaceObj('XTemplateWindow', {
												'Id', "idProgressBarContainer",
												'MouseCursor', "UI/Cursors/Pda_Hand.tga",
											}, {
												PlaceObj('XTemplateWindow', {
													'__class', "OperationProgressBarSection",
													'Id', "idTopLeft",
													'HAlign', "left",
													'VAlign', "top",
													'MinWidth', 15,
													'MinHeight', 2,
													'MaxWidth', 15,
													'MaxHeight', 2,
													'UseClipBox', false,
													'MaxProgress', 13,
												}),
												PlaceObj('XTemplateWindow', {
													'__class', "OperationProgressBarSection",
													'Id', "idTopRight",
													'Margins', box(15, 0, 0, 0),
													'HAlign', "left",
													'VAlign', "top",
													'MinWidth', 15,
													'MinHeight', 2,
													'MaxWidth', 15,
													'MaxHeight', 2,
													'UseClipBox', false,
													'MaxProgress', 12,
												}),
												PlaceObj('XTemplateWindow', {
													'__class', "OperationProgressBarSection",
													'Id', "idRight",
													'HAlign', "right",
													'VAlign', "top",
													'MinWidth', 2,
													'MinHeight', 30,
													'MaxWidth', 2,
													'MaxHeight', 30,
													'UseClipBox', false,
													'Horizontal', false,
													'MaxProgress', 25,
												}),
												PlaceObj('XTemplateWindow', {
													'__class', "OperationProgressBarSection",
													'Id', "idBottom",
													'HAlign', "right",
													'VAlign', "bottom",
													'MinWidth', 30,
													'MinHeight', 2,
													'MaxWidth', 30,
													'MaxHeight', 2,
													'UseClipBox', false,
													'MaxProgress', 25,
												}),
												PlaceObj('XTemplateWindow', {
													'__class', "OperationProgressBarSection",
													'Id', "idLeft",
													'HAlign', "left",
													'VAlign', "bottom",
													'MinWidth', 2,
													'MinHeight', 30,
													'MaxWidth', 2,
													'MaxHeight', 30,
													'UseClipBox', false,
													'Horizontal', false,
													'MaxProgress', 25,
												}),
												}),
											PlaceObj('XTemplateFunc', {
												'name', "OnMousePos",
												'func', function (self, ...)
													return "break"
												end,
											}),
											PlaceObj('XTemplateFunc', {
												'name', "Open(self)",
												'func', function (self)
													self.idTopLeft:SetProgress(0)
													self.idTopRight:SetProgress(0)
													self.idLeft:SetProgress(0)
													self.idRight:SetProgress(0)
													self.idBottom:SetProgress(0)
													XContextWindow.Open(self)
												end,
											}),
											}),
										}),
									}),
								}),
							}),
						}),
					PlaceObj('XTemplateGroup', {
						'__condition', function (parent, context) return GetDialog(GetDialog(parent).parent) == GetDialog("FullscreenGameDialogs") end,
					}, {
						PlaceObj('XTemplateForEach', {
							'comment', "Mercs in the Current Team",
							'array', function (parent, context) return context and context.units end,
							'__context', function (parent, context, item, i, n)
								local unit = g_Units[item]
								if unit and InventoryIsCombatMode(unit) then 
									return unit
								end
								return gv_SatelliteView and  gv_UnitData[item] or g_Units[item] or gv_UnitData[item]
							end,
							'run_after', function (child, context, item, i, n, last)
								child.unit = context
								child:SetContext(child.unit)
								child.idx = i
							end,
						}, {
							PlaceObj('XTemplateTemplate', {
								'__template', "HUDMerc",
								'RolloverAnchorId', "idParty",
								'OnContextUpdate', function (self, context, ...)
									HUDMercClass.OnContextUpdate(self, context, ...)
									self.unit = context
								end,
								'OnPress', function (self, gamepad)
									self:SelectUnit()
								end,
							}, {
								PlaceObj('XTemplateFunc', {
									'name', "Open(self)",
									'func', function (self)
										local noClr = const.PDAUIColors.noClr
										self.idContent:SetBackground(noClr)
										self.idContent:SetBackgroundRectGlowSize(0)
										local dlg = GetDialog(self)
										local ctx = self:GetContext()
										if ctx and dlg.selected_unit and dlg.selected_unit.session_id == ctx.session_id then
											self:SetSelected(true)
										end
										HUDMercClass.Open(self)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SelectUnit(self)",
									'func', function (self)
										local dlg = GetDialog(self)
										local myUnit = self.unit
										local invUnit = dlg.selected_unit
										if IsCoOpGame() then
											if not myUnit:IsLocalPlayerControlled() then											
												if InventoryIsValidGiveDistance(InventoryStartDragContext, myUnit)then
													local args = { src_container = InventoryStartDragContext, src_slot = InventoryStartDragSlotName,
																	dest_container = myUnit, dest_slot = GetContainerInventorySlotName(myUnit)}
													if InventoryDragItems then
														args.multi_items = true
														for i, item in ipairs(InventoryDragItems) do		
															args.item = item
															args.no_ui_respawn = i~=#InventoryDragItems
															local r1, r2  = MoveItem(args) --this will merge stacks and move, if you want only move use amount = item.Amount				
															--		print(item.class, r1, r2)
														end															
														InventoryDeselectMultiItems()
														PlayFX("GiveItem", "start",  GetInventoryItemDragDropFXActor(item))
													elseif InventoryDragItem then
														--give drag item
														args.item = InventoryDragItem
														MoveItem(args)
													end
													--CancelDrag(dlg)
													return
												end
											end
										end
										
										self:SetSelected(true)
										if myUnit and invUnit and myUnit.session_id == invUnit.session_id then
											return
										end
										
										local tacticalUnit = g_Units[myUnit.session_id]
										if tacticalUnit and tacticalUnit:CanBeControlled() then
											SelectObj(g_Units[myUnit.session_id])
										end
										
										local win, button 
										if IsEquipSlot(InventoryStartDragSlotName) then
											local slot_ctrl = dlg:GetSlotByName(InventoryStartDragSlotName)
											win  = slot_ctrl.drag_win
											button = slot_ctrl.drag_button
											slot_ctrl.drag_win = false
											local desktop = slot_ctrl.desktop
											if desktop:GetMouseCapture()==slot_ctrl then
												desktop:SetMouseCapture(false)	
											end
										end
										
										local prev_unit_id = invUnit.session_id
										dlg.selected_unit = myUnit
										dlg.compare_mode_weaponslot = self.unit.current_weapon=="Handheld A" and 1 or 2
										local context = dlg:GetContext()
										context.unit = myUnit
										InventoryClosePopup(dlg)
										dlg:SetContext(context)
										dlg:OnContextUpdate(context)
										dlg.idUnitInfo:RespawnContent()
										dlg:CompareWeaponSetUI()
										--dlg:ActionsUpdated()
										-- move selected unit backpack into view
										local ctrl_right_area = dlg.idScrollArea --= ScrollIntoView
										for _, wnd in ipairs(ctrl_right_area) do
											local wcontext = wnd:GetContext()
											local wnd_id = wnd:GetContext().session_id
											local is_grayouted = InventoryUIGrayOut(wcontext)
											wnd:SetTransparency(is_grayouted and 150 or 0)
											if wnd and wnd_id then
												if wnd_id==prev_unit_id then
													wnd.idName:SetHightlighted(false)
												end	
												if wnd_id==context.unit.session_id then
													ctrl_right_area:ScrollIntoView(wnd)
													wnd.idName:SetHightlighted(true)
												end
											end	
										end
										
										for _, wnd in ipairs(self.parent) do
											wnd:SetSelected(self==wnd)
										end
										
										if IsEquipSlot(InventoryStartDragSlotName) then
											local dlg = GetDialog(self)
											local slot_ctrl = dlg:GetSlotByName(InventoryStartDragSlotName)
											slot_ctrl.drag_win = win
											slot_ctrl.drag_button = button
											DragSource = slot_ctrl
											slot_ctrl.desktop:SetMouseCapture(slot_ctrl)
										end
										if InventoryDragItem and not InventoryDragItems then
											HighlightEquipSlots(InventoryDragItem, true)
											HighlightWeaponsForAmmo(InventoryDragItem, true)
											--HighlightAPCost(InventoryDragItem, true, StartDragSource)
										end
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "IsDropTarget(self, draw_win, pt)",
									'func', function (self, draw_win, pt)
										return true
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "OnDropEnter(self, draw_win, pt, drag_source)",
									'func', function (self, draw_win, pt, drag_source)
										self:SetRollover(true)
										local valid, mouse_text = InventoryIsValidGiveDistance(InventoryStartDragContext, self:GetContext())
										if (not gv_SatelliteView or InventoryIsCombatMode()) and not valid then
											InventoryShowMouseText(true,mouse_text)
											return
										end
										if InventoryDragItem and g_Combat and IsCoOpGame() and not self.context:IsLocalPlayerControlled() then
											mouse_text = T(406257152368, "Cannot pick").."\n"..T(341907478094, "Controlled by <OtherPlayerName()>")
										elseif InventoryDragItem then											
											mouse_text = InventoryGetMoveIsInvalidReason(self.context, InventoryStartDragContext)
											if not mouse_text then
												local ap_cost, unit_ap, action_name = InventoryItemsAPCost(self.context, "Inventory", false, false)
												mouse_text = action_name or ""
												if InventoryIsCombatMode() and ap_cost and ap_cost>0 then
													mouse_text = InventoryFormatAPMouseText(unit_ap, ap_cost, mouse_text)
												end
											end
										end	
										InventoryShowMouseText(not not mouse_text,mouse_text)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "OnDropLeave(self, drag_win)",
									'func', function (self, drag_win)
										self:SetRollover(false)
										InventoryShowMouseText(false)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "OnDrop(self, drag_win, pt, drag_source_win)",
									'func', function (self, drag_win, pt, drag_source_win)
										self:SelectUnit()
										return "not valid target"
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SetHighlighted(self, selected)",
									'func', function (self, selected)
										if type(selected) == "string" then
											local stat = Presets.MercStat.Default[selected]
											if stat then
												local icon = stat.Icon
												local value = self.context[selected]
												self.idStatIcon:SetImage(icon)
												self.idStatCount:SetText(value)
											else
												selected = true
											end
										end
										
										self.highlighted = selected
										--self:OnSetRollover()
										if self.ClassIconOnRollover then
											self.idClass:SetVisible(self.rollover or selected)
										end	
										self:SetupStyle(self.rollover or selected)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SetHighlightedStatOrIcon(self, selected)",
									'func', function (self, selected)
										if type(selected) == "string" then
											local stat = Presets.MercStat.Default[selected]
											if stat then
												local icon = stat.Icon
												local value = self.context[selected]
												self.idStatIcon:SetImage(icon)
												self.idStatCount:SetText(value)
												self.idStatIcon:SetImageColor(GameColors.J)
											else
												self.idStatIcon:SetImage(selected)
												self.idStatCount.parent:SetVisible(false)
												self.idStatIcon:SetImageColor(GameColors.J)
											end
										end
										
										self.highlighted = selected
										if self.ClassIconOnRollover then
											self.idClass:SetVisible(self.rollover or selected)
										end	
										
										if type(self.highlighted) == "string" then
											self.idBar:SetVisible(false)
											self.idStatHighlight:SetVisible(true)
										else
											self.idBar:SetVisible(true)
											self.idStatCount.parent:SetVisible(true)
											self.idStatHighlight:SetVisible(false)
										end
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SetupStyle(self, rollover)",
									'func', function (self, rollover)
										if not self.idContent then
											return
										end
										local hightlighted_string = type(self.highlighted) == "string"
										local selected = self.selected or (self.highlighted and not hightlighted_string)or rollover
										local noClr = const.PDAUIColors.noClr
										local selectedColored =const.HUDUIColors.selectedColored
										local defaultColor = const.HUDUIColors.defaultColor
										self.idContent:SetImage(selected and "UI/PDA/os_portrait_selection" or "")
										self.idBottomPart:SetBackground(selected and noClr or defaultColor)
										self.idBottomPart:SetBackgroundRectGlowColor(selected and noClr or defaultColor)
										self.idContent:SetBackground(selected and RGBA(255,255,255,255) or noClr)
										
										if hightlighted_string then
											self.idBar:SetVisible(false)
											self.idStatHighlight:SetVisible(true)
										else
											self.idBar:SetVisible(true)
											self.idStatHighlight:SetVisible(false)
										end
										--self.idContent:SetFocusedBackground(noClr)
										--self.idContent:SetBackgroundRectGlowColor(selected and selectedColored or noClr)
										local name = self:ResolveId("idName")
										if name then
											self.idName:SetTextStyle(selected and "PDAMercNameCard" or "PDAMercNameCard_Light")
										end
										
										if self.idAPIndicator then
											self.idAPIndicator:SetBackground(selected and selectedColored or defaultColor)
											self.idAPIndicator:SetBackgroundRectGlowSize(selected and 0 or 1)
											self.idAPIndicator:SetBackgroundRectGlowColor(selected and selectedColored or defaultColor)
											self.idAPText:SetTextStyle(selected and "HUDHeaderDark" or "HUDHeader")
										end
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SetSelected(self, selected)",
									'func', function (self, selected)
										--if self.selected == selected then return false end
										self.selected = selected
										self:SetupStyle()
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "OnSetRollover(self, rollover)",
									'func', function (self, rollover)
										HUDMercClass.OnSetRollover(self, rollover)
										self:SetupStyle(rollover)
									end,
								}),
								PlaceObj('XTemplateCode', {
									'comment', "OnMsg.StatusEffectAdded/Removed",
									'run', function (self, parent, context)
										function OnMsg.StatusEffectAdded(unit, status, stacks, reason)
											if status ~= "Hidden" then return end
											if parent.context ~= unit then return end
											HUDMercClass.SetupStyle(parent)
										end
										
										function OnMsg.StatusEffectRemoved(unit, status, stacks, reason)
											if status ~= "Hidden" then return end
											if parent.context ~= unit then return end
											HUDMercClass.SetupStyle(parent)
										end
									end,
								}),
								PlaceObj('XTemplateWindow', {
									'__parent', function (parent, context) return parent.idPortraitBG end,
									'Id', "idStatHighlight",
									'Dock', "box",
									'VAlign', "bottom",
									'FoldWhenHidden', true,
									'DrawOnTop', true,
								}, {
									PlaceObj('XTemplateWindow', {
										'HAlign', "left",
										'VAlign', "bottom",
										'LayoutMethod', "HList",
									}, {
										PlaceObj('XTemplateWindow', {
											'Padding', box(2, 2, 2, 2),
											'HAlign', "right",
											'VAlign', "bottom",
											'MinWidth', 24,
											'MinHeight', 24,
											'MaxWidth', 24,
											'MaxHeight', 24,
											'Background', RGBA(32, 35, 47, 255),
											'BackgroundRectGlowColor', RGBA(32, 35, 47, 255),
										}, {
											PlaceObj('XTemplateWindow', {
												'__class', "XImage",
												'Id', "idStatIcon",
												'Image', "UI/Icons/st_marksmanship",
												'ImageFit', "stretch",
												'ImageColor', RGBA(130, 128, 120, 255),
											}),
											}),
										PlaceObj('XTemplateWindow', {
											'HAlign', "right",
											'VAlign', "bottom",
											'MinWidth', 24,
											'MinHeight', 24,
											'MaxHeight', 24,
											'Background', RGBA(32, 35, 47, 255),
											'BackgroundRectGlowColor', RGBA(32, 35, 47, 255),
										}, {
											PlaceObj('XTemplateWindow', {
												'__class', "XText",
												'Id', "idStatCount",
												'HAlign', "center",
												'VAlign', "center",
												'FoldWhenHidden', true,
												'TextStyle', "HUDHeaderSmallLight",
												'ContextUpdateOnOpen', true,
											}),
											}),
										}),
									}),
								PlaceObj('XTemplateWindow', {
									'HAlign', "right",
								}, {
									PlaceObj('XTemplateWindow', {
										'Id', "idStatusHighlighter",
										'VAlign', "top",
										'LayoutMethod', "VList",
										'Visible', false,
										'FoldWhenHidden', true,
									}, {
										PlaceObj('XTemplateWindow', {
											'comment', "only shows wounded effect",
											'__context', function (parent, context) return context.StatusEffects end,
											'__class', "XContentTemplate",
											'Id', "idStatusEffectsContainer",
											'Margins', box(0, 5, 0, 0),
											'HAlign', "left",
											'VAlign', "top",
											'LayoutMethod', "VWrap",
											'LayoutVSpacing', -2,
											'UseClipBox', false,
											'FoldWhenHidden', true,
										}, {
											PlaceObj('XTemplateForEach', {
												'comment', "status effect",
												'array', function (parent, context) return context.Wounded and { context[context.Wounded] } or empty_table end,
												'condition', function (parent, context, item, i) return item end,
												'__context', function (parent, context, item, i, n) return item end,
											}, {
												PlaceObj('XTemplateTemplate', {
													'__condition', function (parent, context) return context end,
													'__template', "StatusEffectIcon",
													'VAlign', "top",
												}),
												}),
											}),
										}),
									PlaceObj('XTemplateWindow', {
										'__condition', function (parent, context) return IsKindOf(context, "Unit") and g_Combat end,
										'VAlign', "bottom",
										'LayoutMethod', "VList",
										'LayoutVSpacing', 2,
									}, {
										PlaceObj('XTemplateWindow', {
											'Id', "idAPIndicator",
											'Margins', box(-5, 0, 0, 0),
											'Padding', box(2, 2, 2, 2),
											'HAlign', "left",
											'VAlign', "bottom",
											'MinWidth', 30,
											'MinHeight', 30,
											'MaxWidth', 30,
											'MaxHeight', 30,
											'Background', RGBA(230, 222, 203, 255),
											'BackgroundRectGlowColor', RGBA(230, 222, 203, 255),
										}, {
											PlaceObj('XTemplateWindow', {
												'__class', "XText",
												'Id', "idAPText",
												'HAlign', "center",
												'VAlign', "center",
												'FoldWhenHidden', true,
												'TextStyle', "HUDHeaderDark",
												'ContextUpdateOnOpen', true,
												'OnContextUpdate', function (self, context, ...)
													if not IsKindOf(context, "Unit") then return end
													self.parent:SetVisible(not not g_Combat and not context:IsDead() and not context:IsDowned())
													self:SetText(self.Text)
													XContextControl.OnContextUpdate(self, context)
												end,
												'Translate', true,
												'Text', T(284604819801, --[[XTemplate SquadsAndMercs Text]] "<apn(GetUIActionPoints())>"),
											}),
											}),
										}),
									}),
								}),
							}),
						}),
					PlaceObj('XTemplateGroup', {
						'__condition', function (parent, context) return IsKindOf(GetDialog(parent), "IModeCommonUnitControl") or IsKindOf(GetDialog(parent), "IModeDeployment") end,
					}, {
						PlaceObj('XTemplateForEach', {
							'comment', "Mercs in the Current Team",
							'array', function (parent, context) return context and context.units end,
							'condition', function (parent, context, item, i) return IsKindOf(item, "Unit") and item.team and item.team.control == "UI" end,
							'__context', function (parent, context, item, i, n) return item end,
						}, {
							PlaceObj('XTemplateTemplate', {
								'__template', "HUDMerc",
								'OnContextUpdate', function (self, context, ...)
									local unit = self.context
									local unitSelected = not not table.find(Selection, unit)
									self:SetSelected(Selection[1] == unit and "full" or unitSelected)
									self:SetupStyle()
									local showActionInfo = SelectedObj and IsCombatActionForAlly(GetDialog(self).action)
									self.dontShowRollover = showActionInfo
								end,
								'OnPress', function (self, gamepad)
									local selectedUnit = self.context
									local igim = GetInGameInterfaceModeDlg()
									
									if IsCombatActionForAlly(igim.action) and (igim.action.ActionType ~= "Ranged Attack") and (igim.action.ActionType ~= "Melee Attack") then
										if SelectedObj and not SelectedObj.move_attack_target then
											local targets = igim.action:GetTargets({SelectedObj})
											if table.find(targets, selectedUnit) then
												local _, err = CanBandageUI(SelectedObj, { target = selectedUnit })
												if igim.action:GetUIState({SelectedObj}) == "enabled" and not err then
													igim:StartMoveAndAttack(SelectedObj, igim.action, selectedUnit, SelectedObj:GetClosestMeleeRangePos(selectedUnit), {target = selectedUnit})
												end
											end
										end
										return "break"
									end
									
									local canBeControlled, reason = selectedUnit:CanBeControlled()
									if not canBeControlled and reason ~= "not_local_turn" then
										return "break"
									end
									
									if selectedUnit == SelectedObj and not IsPointInsidePoly2D(selectedUnit:GetVisualPos(), CalcCombatZone()) or
										cameraTac.GetFloor() ~= GetStepFloor(selectedUnit) then
										SnapCameraToObj(selectedUnit, nil, GetStepFloor(selectedUnit))
									end
									
									if g_Combat and not gv_DeploymentStarted and not IsKindOf(igim, "IModeCombatMovement") then
										SetInGameInterfaceMode("IModeCombatMovement")
										SelectObj(selectedUnit)
									elseif IsKindOf(igim, "IModeExploration") then
										igim:HandleUnitSelection({selectedUnit})
									else -- Deployment
										SelectObj(selectedUnit)
									end
									
									return "break"
								end,
								'AltPress', true,
								'OnAltPress', function (self, gamepad)
									local selectedUnit = self.context						
									local igim = GetInGameInterfaceModeDlg()
									
									local squad = gv_Squads[self.context.Squad]	
									local context = {
										sector_id = squad.CurrentSector,
										squad_id = squad.UniqueId,
										actions = { "idInventory", "actionOpenCharacterContextMenu", "actionLevelUpViewContextMenu" },
										unit_id = selectedUnit.session_id
									}
									local ctxMenu = XTemplateSpawn("SatelliteViewMapContextMenu", igim, context)
									ctxMenu:SetZOrder(999)
									ctxMenu:SetAnchor(self.box)
									ctxMenu:Open()
									self.desktop:SetModalWindow(ctxMenu)
								end,
								'ClassIconOnRollover', true,
							}, {
								PlaceObj('XTemplateFunc', {
									'name', "OnMouseButtonDoubleClick(self, pt, button)",
									'func', function (self, pt, button)
										local selectedUnit = self.context
										if not IsKindOf(selectedUnit, "Unit") or ActionCameraPlaying then return end
										
										SnapCameraToObj(selectedUnit, "force", GetStepFloor(selectedUnit))
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "OnSetRollover(self, rollover)",
									'func', function (self, rollover)
										local context = self.context								
										
										local igim = GetInGameInterfaceModeDlg()
										if igim and IsCombatActionForAlly(igim.action) then
											if igim.action.id == "Bandage" then
												local _, err = CanBandageUI(SelectedObj, { target = context })
												local bandageError = err and Untranslated(_InternalTranslate(err, { ["flavor"] = "", ["/flavor"] = "" }))
												SetAPIndicator(bandageError and 0 or false, "bandage-error", bandageError, nil, "force")
												context:SetHighlightReason("bandage-target", not err)
											end
											SetAPIndicator(false, "melee-attack")
											SetAPIndicator(false, "unreachable")
										end
										
										local noRollover = context:IsDead() or not context:IsLocalPlayerControlled()
										if rollover and not noRollover then
											SetActiveBadgeExclusive(self.context)
										elseif context.ui_badge then
											context.ui_badge:SetActive(false, "exclusive")
											context:SetHighlightReason("bandage-target", false)
										end
										
										if noRollover then
											rollover = false
										end
										
										HUDMercClass.OnSetRollover(self, rollover)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "SetupStyle(self, ...)",
									'func', function (self, ...)
										if IsKindOf(GetDialog(self.parent), "IModeDeployment") then
											local deployed = IsUnitDeployed(self.context)
											if not deployed then
												self.idPortrait:SetEnabled(false)
												self.idBar.HPColor = GameColors.D
											else
												self.idPortrait:SetEnabled(true)
												self.idBar.HPColor = GameColors.Player
											end
										end
										HUDMercClass.SetupStyle(self, ...)
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "GetMouseCursor(self)",
									'func', function (self)
										local igim = GetInGameInterfaceModeDlg()
										if igim.action and igim.action.id == "Bandage" then
											if CanBandageUI(SelectedObj, { target = self.context }) then
												return "UI/Cursors/Healing_on.tga"
											else
												return "UI/Cursors/Healing_off.tga"
											end
										end
										
										return "UI/Cursors/Hand.tga"
									end,
								}),
								PlaceObj('XTemplateCode', {
									'comment', "OnMsg.StatusEffectAdded/Removed",
									'run', function (self, parent, context)
										function OnMsg.StatusEffectAdded(unit, status, stacks, reasons)
											if status ~= "Hidden" then return end
											if parent.context ~= unit then return end
											HUDMercClass.SetupStyle(parent)
										end
										
										function OnMsg.StatusEffectRemoved(unit, status, stacks, reason)
											if status ~= "Hidden" then return end
											if parent.context ~= unit then return end
											HUDMercClass.SetupStyle(parent)
										end
									end,
								}),
								PlaceObj('XTemplateWindow', {
									'HAlign', "right",
									'VAlign', "bottom",
									'LayoutMethod', "VList",
								}, {
									PlaceObj('XTemplateWindow', nil, {
										PlaceObj('XTemplateWindow', {
											'__class', "XImage",
											'RolloverTemplate', "RolloverGeneric",
											'RolloverAnchor', "right",
											'RolloverText', T(749503136429, --[[XTemplate SquadsAndMercs RolloverText]] "Wounds are being bandaged."),
											'RolloverOffset', box(15, 0, 0, 0),
											'Id', "idBeingBandagedIndicator",
											'HAlign', "center",
											'VAlign', "top",
											'MinWidth', 25,
											'MinHeight', 25,
											'MaxWidth', 25,
											'MaxHeight', 25,
											'Visible', false,
											'HandleMouse', true,
											'Image', "UI/Hud/hud_bandaging",
											'ImageFit', "stretch",
											'ImageScale', point(900, 900),
										}),
										PlaceObj('XTemplateWindow', {
											'__context', function (parent, context) return context.StatusEffects end,
											'__class', "XContentTemplate",
											'Id', "idWounded",
											'Margins', box(3, 0, 0, 0),
											'LayoutMethod', "HList",
											'HandleMouse', true,
											'MouseCursor', "UI/Cursors/Cursor.tga",
										}, {
											PlaceObj('XTemplateTemplate', {
												'__context', function (parent, context) return table.find_value(context, "class", "Wounded") end,
												'__condition', function (parent, context) return not not context end,
												'__template', "StatusEffectIcon",
											}),
											PlaceObj('XTemplateTemplate', {
												'__context', function (parent, context) return table.find_value(context, "class", "Tired") or table.find_value(context, "class", "Exhausted") end,
												'__condition', function (parent, context) return not not context end,
												'__template', "StatusEffectIcon",
											}),
											PlaceObj('XTemplateFunc', {
												'name', "OnMouseButtonDown(self, pos, button)",
												'func', function (self, pos, button)
													return "break"
												end,
											}),
											}),
										}),
									PlaceObj('XTemplateWindow', {
										'__context', function (parent, context) return "combat_bar_enemies" end,
										'__condition', function (parent, context) return not IsKindOf(GetDialog(parent), "IModeDeployment") end,
										'__class', "XContextWindow",
										'RolloverTemplate', "RolloverGeneric",
										'RolloverAnchor', "right",
										'RolloverOffset', box(10, 0, 0, 0),
										'IdNode', true,
										'HAlign', "left",
										'VAlign', "bottom",
										'ContextUpdateOnOpen', true,
										'OnContextUpdate', function (self, context, ...)
											local partyMemberWnd = self:ResolveId("node")
											local member = partyMemberWnd.context
											local targets = GetTargetsToShowInPartyUI(member)
											local targetCount = #targets
											self:SetVisible(targetCount > 0 and not gv_Deployment)
											rawset(self[1], "enemies", targets)
											self:SetRolloverText(T{914820786173, "Visible Enemies: <enemyCount>", enemyCount = targetCount})
											self.idCount:SetText(targetCount)
										end,
									}, {
										PlaceObj('XTemplateWindow', {
											'__class', "XImage",
											'IdNode', false,
											'HandleMouse', true,
											'Image', "UI/Hud/enemies_in_range",
											'Columns', 2,
											'ImageScale', point(900, 900),
										}, {
											PlaceObj('XTemplateFunc', {
												'name', "OnMouseButtonDown(self, pos, button)",
												'func', function (self, pos, button)
													local enemies = rawget(self, "enemies")
													if not enemies or #enemies == 0 then return end
													local lastTarget = rawget(self, "target")
													if not lastTarget or lastTarget == #enemies then lastTarget = 0 end
													lastTarget = lastTarget + 1
													rawset(self, "target", lastTarget)
													SnapCameraToObj(enemies[lastTarget], nil, GetStepFloor(enemies[lastTarget]))
													return "break"
												end,
											}),
											PlaceObj('XTemplateWindow', {
												'__class', "XText",
												'Id', "idCount",
												'HAlign', "right",
												'VAlign', "top",
												'Clip', false,
												'UseClipBox', false,
												'FoldWhenHidden', true,
												'TextStyle', "VisibleEnemiesUICount",
											}),
											}),
										}),
									PlaceObj('XTemplateWindow', {
										'Id', "idAPIndicator",
										'Margins', box(-5, 0, 0, 0),
										'Padding', box(2, 2, 2, 2),
										'HAlign', "left",
										'VAlign', "bottom",
										'MinWidth', 30,
										'MinHeight', 30,
										'MaxWidth', 30,
										'MaxHeight', 30,
										'Background', RGBA(230, 222, 203, 255),
										'BackgroundRectGlowColor', RGBA(230, 222, 203, 255),
									}, {
										PlaceObj('XTemplateWindow', {
											'__class', "XText",
											'Id', "idAPText",
											'HAlign', "center",
											'VAlign', "center",
											'FoldWhenHidden', true,
											'TextStyle', "HUDHeaderDark",
											'ContextUpdateOnOpen', true,
											'OnContextUpdate', function (self, context, ...)
												if not IsKindOf(context, "Unit") then return end
												self.parent:SetVisible(not not g_Combat and not context:IsDead() and not context:IsDowned())
												self:SetText(self.Text)
												XContextControl.OnContextUpdate(self, context)
											end,
											'Translate', true,
											'Text', T(106414160747, --[[XTemplate SquadsAndMercs Text]] "<apn(GetUIActionPoints())>"),
										}),
										PlaceObj('XTemplateWindow', {
											'__class', "XImage",
											'Id', "idBandageIndicator",
											'Visible', false,
											'Image', "UI/Hud/Status effects/treating",
											'ImageFit', "stretch",
										}),
										}),
									PlaceObj('XTemplateWindow', {
										'__condition', function (parent, context) return IsKindOf(GetDialog(parent), "IModeDeployment") end,
										'RolloverTemplate', "SmallRolloverGeneric",
										'RolloverAnchor', "top",
										'RolloverText', T(651816911668, --[[XTemplate SquadsAndMercs RolloverText]] "Аwaiting deployment"),
										'RolloverOffset', box(-15, 0, 0, -15),
										'Id', "idDeployed",
										'Margins', box(-5, 0, 0, -5),
										'HAlign', "right",
										'VAlign', "bottom",
										'HandleMouse', true,
									}, {
										PlaceObj('XTemplateWindow', {
											'__class', "XContextImage",
											'FoldWhenHidden', true,
											'Image', "UI/Hud/notification",
											'ContextUpdateOnOpen', true,
											'OnContextUpdate', function (self, context, ...)
												if not IsKindOf(context, "Unit") then return end
												local deployed = IsUnitDeployed(context)
												self.parent:SetVisible(not deployed)
												XContextControl.OnContextUpdate(self, context)
											end,
										}),
										}),
									}),
								PlaceObj('XTemplateWindow', {
									'comment', "sus bar",
									'__parent', function (parent, context) return parent.idBottomPart end,
									'__condition', function (parent, context) return not g_Combat end,
									'__class', "SmoothBar",
									'Margins', box(0, 0, 0, -3),
									'Dock', "top",
									'VAlign', "top",
									'MinHeight', 3,
									'MaxHeight', 3,
									'Background', RGBA(52, 55, 61, 255),
									'BindTo', "suspicion",
									'FillColor', RGBA(222, 60, 75, 255),
								}, {
									PlaceObj('XTemplateFunc', {
										'name', "Open(self)",
										'func', function (self)
											self.MaxValue = SuspicionThreshold
											SmoothBar.Open(self)
										end,
									}),
									}),
								PlaceObj('XTemplateWindow', {
									'comment', "sus indicator",
									'__context', function (parent, context) return "UnitsSusBeingRaised" end,
									'__parent', function (parent, context) return parent.idPortraitBG end,
									'__condition', function (parent, context) return not g_Combat end,
									'__class', "XContextImage",
									'Id', "idSusIndicator",
									'Margins', box(0, 0, 5, 0),
									'HAlign', "right",
									'MinWidth', 15,
									'MinHeight', 20,
									'MaxWidth', 15,
									'MaxHeight', 20,
									'Visible', false,
									'DrawOnTop', true,
									'Image', "UI/Hud/enemy_detection",
									'ImageFit', "width",
									'ContextUpdateOnOpen', true,
									'OnContextUpdate', function (self, context, ...)
										local obj = self:ResolveId("node")
										obj = obj and obj.context
										self:SetVisible(UnitsSusBeingRaised and obj and UnitsSusBeingRaised[obj.handle])
									end,
								}),
								}),
							}),
						}),
					}),
				PlaceObj('XTemplateFunc', {
					'name', "RespawnContent(self, ...)",
					'func', function (self, ...)
						-- This will prevent the tactical view party from updating during satellite gameplay.
						-- The UI is then refreshed upon exiting satellite view.
						if not self:IsVisible() and not GetParentOfKind(self, "PDAClass") then return end
						if UIRebuildSpam then
							DbgUIRebuild("party inner")
						end
						XContentTemplate.RespawnContent(self)
					end,
				}),
				}),
			PlaceObj('XTemplateFunc', {
				'name', "UpdateMeasure(self, max_width, max_height)",
				'func', function (self, max_width, max_height)
					if not self.measure_update then return end
					
					self:SetScaleModifier(point(1000, 1000))
					local _, yM = ScaleXY(self.parent.scale, 0, 150) -- command button and snype roughly
					max_height = max_height - yM
					
					XControl.UpdateMeasure(self, max_width, max_height)
					if self.measure_height < max_height then
						return
					end
					
					local one = point(1000, 1000)
					for _, child in ipairs(self) do
						child:SetOutsideScale(one)
					end
					self.scale = one
					XControl.UpdateMeasure(self, 1000000, 1000000)
					local content_width, content_height = ScaleXY(self.parent.scale, self.measure_width, self.measure_height)
					assert(content_width > 0 and content_height > 0)
					if content_width == 0 or content_height == 0 then
						XControl.UpdateMeasure(self, max_width, max_height)
						return
					end
					local scale_x = max_width * 1000 / content_width
					local scale_y = max_height * 1000 / content_height
					scale_x = scale_y
					
					self:SetScaleModifier(point(scale_x, scale_y))
					XControl.UpdateMeasure(self, max_width, max_height)
				end,
			}),
			}),
		}),
})

