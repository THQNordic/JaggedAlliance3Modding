-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	group = "Zulu",
	id = "SectorOperationStatsPopupUI",
	PlaceObj('XTemplateWindow', {
		'__class', "XPopup",
		'Padding', box(0, 4, 0, 4),
		'DrawOnTop', true,
		'Background', RGBA(195, 189, 172, 255),
		'FocusedBackground', RGBA(195, 189, 172, 255),
		'AnchorType', "top",
	}, {
		PlaceObj('XTemplateWindow', {
			'__class', "XContentTemplate",
			'IdNode', false,
			'Padding', box(0, 4, 0, 4),
			'LayoutMethod', "VList",
			'Background', RGBA(195, 189, 172, 255),
		}, {
			PlaceObj('XTemplateForEach', {
				'array', function (parent, context) return GetUnitStatsComboTranslated("Wisdom") end,
				'__context', function (parent, context, item, i, n) return item end,
			}, {
				PlaceObj('XTemplateWindow', {
					'__class', "XTextButton",
					'Padding', box(4, 0, 0, 0),
					'Background', RGBA(195, 189, 172, 0),
					'OnContextUpdate', function (self, context, ...)
						self:SetText(context.name)
						local node = self:ResolveId("node")
						local sector = node:GetContext()
						-- set enaabled change color for selected item
						self:SetEnabled(not(sector and sector.training_stat==context.value))
					end,
					'OnPress', function (self, gamepad)
						local node = self:ResolveId("node")
						if not node then return end
						local lists_dlg = GetDialog(self).idBase.idMain
						local mercs_list = lists_dlg.idMercsList
						local sector = node:GetContext()
						local items =  GetUnitStatsComboTranslated("Wisdom")
						local prev_val = sector.training_stat
						local item = self.context
						local value = item.value
						if value==prev_val then
							return 
						end
						PlayFX("activityTrainingPress", "start", self)
						local mercs = GetOperationProfessionals(sector.Id, "TrainMercs")
						if next(mercs) then
							CreateRealTimeThread(function(self, parent)
								local popupHost = GetDialog("PDADialogSatellite")
								popupHost = popupHost and popupHost:ResolveId("idDisplayPopupHost")
							
								local prop_meta_old = table.find_value(UnitPropertiesStats:GetProperties(), "id", prev_val)
								local prop_meta_new = table.find_value(UnitPropertiesStats:GetProperties(), "id", value)
								local dlg = CreateQuestionBox(
									popupHost,
									T(1000599, "Warning"),
									T{464840818810, "Do you want to end current <stat_name> training and start training <new_stat_name>",
										stat_name = prop_meta_old.name, new_stat_name = prop_meta_new.name},
									T(689884995409, "Yes"),
									T(782927325160, "No"))
								local res = dlg:Wait()								
								if res == "ok" then
									sector.training_stat = value
									mercs_list:OnContextUpdate()
									parent:OnContextUpdate(parent.context, true)
									local costs = GetOperationCostsProcessed(mercs,"TrainMercs")
									for i, merc in ipairs(mercs) do
										NetSyncEvent("RestoreOperationCostAndSetOperation", merc.session_id, costs[i], "Idle")
									end
								else				
									local prev_item = table.find_value(items, "value", prev_val)		
									sector.training_stat = prev_val
									mercs_list:OnContextUpdate()
									parent:OnContextUpdate(parent.context, true)
								end
								NetSyncEvent("SetTrainingStat", sector.Id, sector.training_stat) --update other client selection
								ObjModified(sector)
							end,self, self.parent)	
						else
							sector.training_stat = value
							mercs_list:OnContextUpdate()
							self.parent:OnContextUpdate(self.parent.context, true)
							NetSyncEvent("SetTrainingStat", sector.Id, value) --update other client selection
						end
					end,
					'RolloverBackground', RGBA(32, 35, 47, 255),
					'PressedBackground', RGBA(195, 189, 172, 255),
					'TextStyle', "PDACommonButtonWithRollover",
					'Translate', true,
				}),
				}),
			}),
		PlaceObj('XTemplateFunc', {
			'name', "OnMouseButtonDown(self, pos, button)",
			'func', function (self, pos, button)
				if button == "R" or not self:MouseInWindow(pos) then
					self:Close()
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnShortcut(self, shortcut, source, ...)",
			'func', function (self, shortcut, source, ...)
				if shortcut == "ButtonY" then
					self:Close()
					return "break"
				end
				return XPopup.OnShortcut(self, shortcut, source, ...)
			end,
		}),
		}),
})

