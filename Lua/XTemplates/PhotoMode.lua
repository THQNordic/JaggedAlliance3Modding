-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	group = "Zulu",
	id = "PhotoMode",
	PlaceObj('XTemplateWindow', {
		'__context', function (parent, context) return PhotoModeBegin() end,
		'__class', "XDialog",
		'Id', "idPhotoMode",
	}, {
		PlaceObj('XTemplateLayer', {
			'layer', "XPauseLayer",
		}),
		PlaceObj('XTemplateLayer', {
			'layer', "XHideInGameInterfaceLayer",
		}),
		PlaceObj('XTemplateFunc', {
			'name', "Open",
			'func', function (self, ...)
				CloseIngameMainMenu()
				XDialog.Open(self, ...)
				local list = self.idScrollArea
				list:SetFocus(true)
				list:SelectFirstValidItem()
				
				self.isCameraUnlocked = false
				self.prev_interactablesOn = interactablesOn or false and true
				self.isWorldUIHidden = false
				self.areValuesDefault = self.context:AreValuesDefault() -- for reset button
				self.prevGamepadOn = GetUIStyleGamepad()
				
				table.change(hr, "PhotoMode", { EnablePostProcDOF = 1 })
				LockCamera("PhotoModeFlyCamera")
				
				HighlightAllInteractables(false)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnShortcut(self, shortcut, source)",
			'func', function (self, shortcut, source)
				if self.isCameraUnlocked and shortcut == "Alt" and cameraFly.IsActive() and g_MouseConnected then
					if not IsCameraLocked("PhotoModeFlyCamera") then
						SetMouseDeltaMode(false)
						LockCamera("PhotoModeFlyCamera")
					else
						SetMouseDeltaMode(true)
						UnlockCamera("PhotoModeFlyCamera")
					end
					return "break"
				end
				return XDialog.OnShortcut(self, shortcut, source)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "Close",
			'func', function (self, ...)
				PhotoModeEnd()
				HighlightAllInteractables(self.prev_interactablesOn)
				HideWorldUI(false)
				local mode_dlg = GetInGameInterfaceModeDlg()
				if self.prev_gamepadOn and mode_dlg and IsKindOf(mode_dlg, "GamepadUnitControl") then mode_dlg:ResumeGamepadThread() end
				XDialog.Close(self, ...)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "BlinkFilePath(self, path)",
			'func', function (self, path)
				self:DeleteThread("path")
				self:CreateThread("path", function(path)
					self.idPath:SetText(path)
					self.idPath:SetVisible(true)
					Sleep(3000)
					self.idPath:SetVisible(false)
				end, path)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "ToggleUI",
			'func', function (self, ...)
				local value = not self.idSubMenu:GetVisible()
				self.idSubMenu:SetVisible(value)
				if Platform.console then
					self.idActionBar:SetVisible(value)
					self.idFreeCameraWarning:SetVisible(value and cameraFly.IsActive())
				end
				if value and GetUIStyleGamepad() then
					self.idScrollArea:SetSelection(self.idScrollArea.focused_item or 1)
				end
				if not value and self.idSubSubContent.idItemsContent then
					self.idSubSubContent.idItemsContent:Close()
					CloseOptionsChoiceSubmenu(self.idSubSubContent)
				end
			end,
		}),
		PlaceObj('XTemplateWindow', {
			'comment', "UI elements to be hidden in screenshots",
			'Id', "idHideUIWindow",
			'Margins', box(50, 100, 0, 0),
			'MarginPolicy', "FitInSafeArea",
			'HAlign', "left",
			'VAlign', "bottom",
		}, {
			PlaceObj('XTemplateWindow', {
				'__class', "XLabel",
				'Id', "idPath",
				'Dock', "bottom",
				'HAlign', "left",
				'TextStyle', "DescriptionTextLightYellowBigger",
			}),
			PlaceObj('XTemplateWindow', {
				'Id', "idSubMenu",
				'HAlign', "left",
				'MinWidth', 512,
				'MaxWidth', 512,
				'LayoutMethod', "VList",
				'HandleMouse', true,
			}, {
				PlaceObj('XTemplateWindow', {
					'__class', "XContentTemplateList",
					'Id', "idScrollArea",
					'BorderWidth', 0,
					'Padding', box(0, 0, 0, 0),
					'OnLayoutComplete', function (self)  end,
					'UniformRowHeight', true,
					'Clip', false,
					'Background', RGBA(0, 0, 0, 0),
					'FocusedBackground', RGBA(0, 0, 0, 0),
					'VScroll', "idScroll",
					'ShowPartialItems', false,
					'MouseScroll', true,
					'SetFocusOnOpen', true,
					'OnContextUpdate', function (self, context, ...)
						if self.RespawnOnContext then
							if self.window_state == "open" then
								self.KeepSelectionOnRespawn = GetUIStyleGamepad()
								XContentTemplateList.RespawnContent(self, ...)
							end
						else
							local respawn_value = self:RespawnExpression(context)
							if rawget(self, "respawn_value") ~= respawn_value then
								self.respawn_value = respawn_value
								if self.window_state == "open" then
									self.KeepSelectionOnRespawn = GetUIStyleGamepad()
									XContentTemplateList.RespawnContent(self, ...)
								end
							end
						end
					end,
					'RespawnOnContext', false,
					'KeepSelectionOnRespawn', true,
				}, {
					PlaceObj('XTemplateWindow', {
						'__class', "XButton",
						'MinHeight', 64,
						'MaxHeight', 64,
						'LayoutMethod', "HList",
						'FoldWhenHidden', true,
						'BorderColor', RGBA(0, 0, 0, 0),
						'Background', RGBA(255, 255, 255, 0),
						'FocusedBorderColor', RGBA(0, 0, 0, 0),
						'FocusedBackground', RGBA(128, 128, 128, 0),
						'DisabledBorderColor', RGBA(0, 0, 0, 0),
						'RolloverBackground', RGBA(255, 255, 255, 0),
						'PressedBackground', RGBA(255, 255, 255, 0),
					}, {
						PlaceObj('XTemplateWindow', {
							'__class', "XBlurRect",
							'Dock', "box",
							'BlurRadius', 10,
							'Mask', "UI/Common/mm_panel",
							'FrameLeft', 15,
							'FrameRight', 10,
						}),
						PlaceObj('XTemplateWindow', {
							'__class', "XFrame",
							'Id', "idEffect",
							'Margins', box(5, 5, 5, 5),
							'Dock', "box",
							'Transparency', 179,
							'HandleKeyboard', false,
							'Image', "UI/Common/screen_effect",
							'ImageScale', point(100000, 1000),
							'TileFrame', true,
							'SqueezeX', false,
							'SqueezeY', false,
						}),
						PlaceObj('XTemplateWindow', {
							'__class', "XFrame",
							'UIEffectModifierId', "MainMenuMainBar",
							'Id', "idImg1",
							'Dock', "box",
							'Transparency', 38,
							'HandleKeyboard', false,
							'Image', "UI/Common/mm_title",
							'SqueezeX', false,
							'SqueezeY', false,
						}),
						PlaceObj('XTemplateWindow', {
							'__class', "XText",
							'Id', "idName",
							'Margins', box(20, 0, 0, 0),
							'HAlign', "left",
							'VAlign', "center",
							'MinWidth', 300,
							'MaxWidth', 300,
							'HandleKeyboard', false,
							'HandleMouse', false,
							'TextStyle', "PDABrowserHeader",
							'Translate', true,
							'Text', T(207584479877, --[[XTemplate PhotoMode Text]] "Photo Mode"),
							'WordWrap', false,
							'TextVAlign', "center",
						}),
						PlaceObj('XTemplateFunc', {
							'name', "IsSelectable(self)",
							'func', function (self)
								return false
							end,
						}),
						}),
					PlaceObj('XTemplateForEach', {
						'comment', "props",
						'array', function (parent, context) return context:GetProperties() end,
						'condition', function (parent, context, item, i)
							local obj = ResolvePropObj(context) 
							return not prop_eval(item.no_edit, obj, item)
						end,
						'item_in_context', "prop_meta",
						'run_after', function (child, context, item, i, n, last)
							if child.idSlider then  -- prop number
								child.idSlider:SetMinWidth(150) 
								child.idSlider:SetMaxWidth(150) 
							elseif child.idValue then -- prop choice
								child.idValue:SetMinWidth(150) 
								child.idValue:SetMaxWidth(150) 
							elseif child.idOn then -- prop bool
								child.idOn:SetMinWidth(150) 
								child.idOn:SetMaxWidth(150) 
								child.idOff:SetMinWidth(150) 
								child.idOff:SetMaxWidth(150) 
							end
						end,
					}, {
						PlaceObj('XTemplateTemplate', {
							'__template', "PropEntry",
							'HAlign', "center",
							'OnLayoutComplete', function (self)  end,
							'RolloverOnFocus', true,
						}),
						}),
					}),
				PlaceObj('XTemplateWindow', {
					'__class', "XZuluScroll",
					'Id', "idScroll",
					'Margins', box(0, 0, 15, 0),
					'Dock', "right",
					'HAlign', "right",
					'MaxWidth', 5,
					'MaxHeight', 50,
					'MouseCursor', "UI/Cursors/Hand.tga",
					'Target', "idScrollArea",
					'Max', 50,
					'SnapToItems', true,
					'AutoHide', true,
				}),
				}),
			PlaceObj('XTemplateWindow', {
				'__class', "XContentTemplate",
				'IdNode', false,
				'Dock', "bottom",
				'LayoutMethod', "HList",
				'FoldWhenHidden', true,
				'RespawnOnContext', false,
			}, {
				PlaceObj('XTemplateFunc', {
					'name', "RespawnContent",
					'func', function (self, ...)
						XContentTemplate.RespawnContent(self, ...)
						local warning = self:ResolveId("idFreeCameraWarning")
						if warning then warning:SetVisible(cameraFly.IsActive()) end
					end,
				}),
				PlaceObj('XTemplateWindow', {
					'__condition', function (parent, context) return not GetUIStyleGamepad() end,
					'__class', "XText",
					'Id', "idFreeCameraWarning",
					'Margins', box(0, 0, 0, 15),
					'HAlign', "left",
					'VAlign', "bottom",
					'Visible', false,
					'HandleMouse', false,
					'TextStyle', "DescriptionTextLightYellowBigger",
					'Translate', true,
					'Text', T(679404141391, --[[XTemplate PhotoMode Text]] "<em><ShortcutName('actionPanUp')>,<ShortcutName('actionPanDown')>,<ShortcutName('actionPanLeft')>,<ShortcutName('actionPanRight')>,<ShortcutName('actionRotLeft')>,<ShortcutName('actionRotRight')></em> - Move, <em>Hold CTRL</em> - Move faster, <em>ALT</em> - Toggle mouse cursor"),
					'HideOnEmpty', true,
				}),
				PlaceObj('XTemplateWindow', {
					'__condition', function (parent, context) return GetUIStyleGamepad() end,
					'__class', "XText",
					'Id', "idFreeCameraWarning",
					'Margins', box(0, 0, 0, 15),
					'HAlign', "left",
					'VAlign', "bottom",
					'Visible', false,
					'HandleMouse', false,
					'TextStyle', "DescriptionTextLightYellowBigger",
					'Translate', true,
					'Text', T(190145861232, --[[XTemplate PhotoMode Text]] "<LS> - Move, <RS> - Rotate, <LT><RT> - Move up/down."),
					'HideOnEmpty', true,
				}),
				}),
			PlaceObj('XTemplateWindow', {
				'__class', "XContentTemplate",
				'Id', "idActionBar",
				'IdNode', false,
				'Margins', box(0, 0, 0, 20),
				'Dock', "bottom",
				'HAlign', "left",
				'VAlign', "center",
				'MinWidth', 512,
				'MinHeight', 38,
				'LayoutMethod', "HList",
			}, {
				PlaceObj('XTemplateAction', {
					'ActionId', "idTakeScreenshot",
					'ActionName', T(877014493476, --[[XTemplate PhotoMode ActionName]] "Take Photo"),
					'ActionToolbar', "ActionBar",
					'ActionShortcut', "T",
					'ActionGamepad', "ButtonY",
					'OnAction', function (self, host, source, ...)
						local meta = host.context:GetPropertyMetadata("frameDuration")
						host.context:DeactivateFreeCamera()
						host.idScrollArea:RespawnContent()
						PhotoModeTake(host.context.frameDuration, meta.max)
					end,
					'__condition', function (parent, context) return not Platform.console end,
				}),
				PlaceObj('XTemplateAction', {
					'ActionId', "idReset",
					'ActionName', T(800696391681, --[[XTemplate PhotoMode ActionName]] "Reset"),
					'ActionToolbar', "ActionBar",
					'ActionShortcut', "R",
					'ActionGamepad', "RightThumbClick",
					'ActionState', function (self, host)
						return host.areValuesDefault and "disabled" or "enabled"
					end,
					'OnAction', function (self, host, source, ...)
						host.context:ResetProperties()
						host.context:DeactivateFreeCamera()
						host.areValuesDefault = true
						host.idActionBar:RespawnContent()
						host.idScrollArea:RespawnContent()
					end,
					'__condition', function (parent, context) return parent:ResolveId("idSubMenu"):GetVisible() end,
				}),
				PlaceObj('XTemplateAction', {
					'ActionId', "idToggleUI",
					'ActionName', T(778946363517, --[[XTemplate PhotoMode ActionName]] "Toggle UI"),
					'ActionToolbar', "ActionBar",
					'ActionShortcut', "U",
					'ActionGamepad', "LeftShoulder",
					'OnAction', function (self, host, source, ...)
						host:ToggleUI()
					end,
				}),
				PlaceObj('XTemplateAction', {
					'ActionId', "idToggleCombatUI",
					'ActionName', T(879213936162, --[[XTemplate PhotoMode ActionName]] "Toggle World UI"),
					'ActionToolbar', "ActionBar",
					'ActionShortcut', "Y",
					'ActionGamepad', "RightShoulder",
					'OnAction', function (self, host, source, ...)
						host.isWorldUIHidden = not host.isWorldUIHidden
						host.context:DeactivateFreeCamera()
						host.idScrollArea:RespawnContent()
						HideWorldUI(host.isWorldUIHidden)
					end,
				}),
				PlaceObj('XTemplateAction', {
					'ActionId', "close",
					'ActionName', T(676109205191, --[[XTemplate PhotoMode ActionName]] "Close"),
					'ActionToolbar', "ActionBar",
					'ActionShortcut', "Escape",
					'ActionGamepad', "ButtonB",
					'OnAction', function (self, host, source, ...)
						CreateRealTimeThread(function(host)
							host.context:DeactivateFreeCamera()
							host.idScrollArea:RespawnContent()
							host.idActionBar:RespawnContent()
							if WaitQuestion(terminal.desktop, T(463488345232, "Exit Photo Mode"), T(528652976882, "Are you sure you want to exit?"), T(1138, "Yes"), T(1139, "No")) == "ok" then
								host:Close()
							end
						end, host)
					end,
				}),
				PlaceObj('XTemplateWindow', {
					'__class', "XZuluToolBarList",
					'Id', "idToolBar",
					'ZOrder', 0,
					'HAlign', "left",
					'VAlign', "center",
					'MinWidth', 512,
					'UniformColumnWidth', true,
					'Background', RGBA(255, 255, 255, 0),
					'Toolbar', "ActionBar",
					'Show', "text",
					'SeparatorColor', RGBA(160, 160, 160, 0),
					'ButtonTemplate', "OptionsActionsButton",
				}, {
					PlaceObj('XTemplateFunc', {
						'comment', "Position buttons in grid",
						'name', "RebuildActions(self, ...)",
						'func', function (self, ...)
							XZuluToolBarList.RebuildActions(self, ...)
							
							local parent = self:GetButtonParent()
							parent[1]:SetMargins(box(-5,0,0,0))
						end,
					}),
					}),
				}),
			PlaceObj('XTemplateWindow', {
				'comment', "for choice properties",
				'__class', "XDialog",
				'Id', "idSubSubContent",
				'Margins', box(10, 0, 0, 0),
				'UseClipBox', false,
				'InternalModes', "items, empty",
			}, {
				PlaceObj('XTemplateWindow', {
					'__class', "XContentTemplate",
					'Id', "idSubSubMenu",
					'IdNode', false,
					'UseClipBox', false,
				}, {
					PlaceObj('XTemplateMode', {
						'comment', "empty",
						'mode', "empty",
					}),
					PlaceObj('XTemplateMode', {
						'mode', "items",
					}, {
						PlaceObj('XTemplateWindow', {
							'Margins', box(-20, 0, 0, 0),
							'Padding', box(0, 3, 0, 0),
							'VAlign', "top",
							'MinHeight', 587,
							'MaxHeight', 587,
						}, {
							PlaceObj('XTemplateWindow', {
								'__class', "XPopup",
								'Id', "idItemsContent",
								'Dock', false,
								'MinWidth', 315,
								'MaxWidth', 315,
								'BorderColor', RGBA(128, 128, 128, 0),
								'Background', RGBA(240, 240, 240, 0),
								'FocusedBorderColor', RGBA(128, 128, 128, 0),
								'FocusedBackground', RGBA(240, 240, 240, 0),
								'DisabledBorderColor', RGBA(0, 0, 0, 0),
								'AnchorType', "top-right",
							}, {
								PlaceObj('XTemplateWindow', {
									'__context', function (parent, context) return GetDialogModeParam(parent).prop_meta.items() end,
									'__class', "SnappingScrollArea",
									'Id', "idItemsScrollArea",
									'Margins', box(0, -5, 0, 0),
									'Dock', "left",
									'MinWidth', 300,
									'MaxWidth', 300,
									'VScroll', "idItemsScroll",
									'GamepadInitialSelection', true,
									'KeepSelectionOnRespawn', true,
									'RightThumbScroll', true,
								}, {
									PlaceObj('XTemplateForEach', {
										'comment', "properties",
										'__context', function (parent, context, item, i, n) return item end,
										'run_after', function (child, context, item, i, n, last)
											local currentUsedValue = GetDialogModeParam(child.parent) and GetDialogModeParam(child.parent).value
											if currentUsedValue and currentUsedValue == context.value then
												child.idBtnText:SetEnabled(false)
											end
											child.idBtnText:SetText(item.text)
										end,
									}, {
										PlaceObj('XTemplateTemplate', {
											'__template', "SubSubMenuButton",
											'RolloverTemplate', "RolloverGeneric",
											'IdNode', false,
											'OnPress', function (self, gamepad)
												local prop_meta = GetDialogModeParam(self).prop_meta
												local obj = ResolvePropObj(GetDialogModeParam(self).context)
												SetProperty(obj, prop_meta.id, self.context.value)
												local dialog = GetDialog(self):ResolveId("idSubMenu"):ResolveId("idScrollArea")
												dialog:SetMouseScroll(true)
												dialog:RespawnContent()
												if not GetUIStyleGamepad() then
													GetDialog(self):SetMode("empty")
												end
											end,
											'RolloverBackground', RGBA(255, 255, 255, 0),
										}),
										}),
									}),
								PlaceObj('XTemplateAction', {
									'ActionId', "idBack",
									'ActionGamepad', "ButtonB",
									'OnAction', function (self, host, source, ...)
										if GetUIStyleGamepad() then
											host:ResolveId("idItemsContent"):Close()
											CloseOptionsChoiceSubmenu(host)
										end
									end,
									'FXPress', "MainMenuButtonClick",
								}),
								PlaceObj('XTemplateWindow', {
									'__class', "XZuluScroll",
									'Id', "idItemsScroll",
									'Dock', "right",
									'HAlign', "right",
									'MouseCursor', "UI/Cursors/Hand.tga",
									'Target', "idItemsScrollArea",
									'SnapToItems', true,
									'AutoHide', true,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "Open(self, ...)",
									'func', function (self, ...)
										XWindow.Open(self, ...)
										self:SetAnchor(GetDialogModeParam(self).box)
										GetDialogModeParam(self).isExpanded = true
									end,
								}),
								PlaceObj('XTemplateFunc', {
									'name', "GetSafeAreaBox(self)",
									'func', function (self)
										return self.parent.box:xyxy()
									end,
								}),
								}),
							}),
						}),
					}),
				}),
			}),
		}),
})

