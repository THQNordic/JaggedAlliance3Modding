-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	__is_kind_of = "XButton",
	group = "Zulu",
	id = "MainMenuTagsUIEntry",
	PlaceObj('XTemplateWindow', {
		'__class', "XButton",
		'MinHeight', 64,
		'MaxHeight', 64,
		'LayoutMethod', "HList",
		'FoldWhenHidden', true,
		'BorderColor', RGBA(0, 0, 0, 0),
		'Background', RGBA(255, 255, 255, 0),
		'OnContextUpdate', function (self, context, ...)
			local subSubDlg = GetDialog(self):ResolveId("idSubSubContent")
			if subSubDlg then
				self:SetisExpanded(subSubDlg.Mode == "tags")
			end
			self.idName:SetTextStyle(self:GetisExpanded() and "InventoryToolbarButtonCenter" or "PDABrowserHeader")
			self.idTags:SetTextStyle(self:GetisExpanded() and "MMOptionEntryValue" or "PDABrowserNameSmall")
			
			if g_ModsUIContextObj then
				local enabledTags = table.copy(g_ModsUIContextObj.temp_installed_tags)
				enabledTags = table.keys(enabledTags)
				local allEnabled = AreAllTagsEnabled()
			
				local noneT = T(910862618338, "None")
				local allT = T(470357587467, "All")
				local tagsString = next(enabledTags) and table.concat(enabledTags, ",") or  _InternalTranslate(noneT)
				self.idTags:SetText(allEnabled and _InternalTranslate(allT) or tagsString)
				self.parent.parent:InvalidateLayout()
			end
		end,
		'FocusedBorderColor', RGBA(0, 0, 0, 0),
		'FocusedBackground', RGBA(128, 128, 128, 0),
		'DisabledBorderColor', RGBA(0, 0, 0, 0),
		'RolloverBackground', RGBA(255, 255, 255, 0),
		'PressedBackground', RGBA(255, 255, 255, 0),
	}, {
		PlaceObj('XTemplateWindow', {
			'__condition', function (parent, context) return not GetDialog("PDADialog") end,
			'__class', "XBlurRect",
			'Dock', "box",
			'BlurRadius', 10,
			'Mask', "UI/Common/mm_panel",
			'FrameLeft', 15,
			'FrameRight', 10,
		}),
		PlaceObj('XTemplateWindow', {
			'__class', "XFrame",
			'Id', "idEffect",
			'Margins', box(5, 5, 5, 5),
			'Dock', "box",
			'Transparency', 179,
			'HandleKeyboard', false,
			'Image', "UI/Common/screen_effect",
			'ImageScale', point(100000, 1000),
			'TileFrame', true,
			'SqueezeX', false,
			'SqueezeY', false,
		}),
		PlaceObj('XTemplateWindow', {
			'__class', "XFrame",
			'UIEffectModifierId', "MainMenuMainBar",
			'Id', "idImg1",
			'Dock', "box",
			'Transparency', 38,
			'HandleKeyboard', false,
			'Image', "UI/Common/mm_title",
			'SqueezeX', false,
			'SqueezeY', false,
		}),
		PlaceObj('XTemplateWindow', {
			'__class', "XText",
			'Id', "idName",
			'Margins', box(20, 0, 0, 0),
			'HAlign', "left",
			'VAlign', "center",
			'MinWidth', 300,
			'MaxWidth', 300,
			'HandleKeyboard', false,
			'HandleMouse', false,
			'TextStyle', "PDABrowserHeader",
			'Translate', true,
			'Text', T(203248054942, --[[XTemplate MainMenuTagsUIEntry Text]] "TAGS"),
			'WordWrap', false,
			'TextVAlign', "center",
		}),
		PlaceObj('XTemplateWindow', {
			'__class', "XImage",
			'Id', "idExpand",
			'Margins', box(0, 0, 20, 0),
			'Dock', "right",
			'HandleKeyboard', false,
			'Image', "UI/PDA/Quest/expand_arrow",
			'FlipY', true,
		}),
		PlaceObj('XTemplateWindow', {
			'__context', function (parent, context) return "tags" end,
			'__class', "XText",
			'Id', "idTags",
			'Margins', box(0, 0, 15, 0),
			'Dock', "right",
			'MaxWidth', 300,
			'HandleKeyboard', false,
			'HandleMouse', false,
			'TextStyle', "PDABrowserNameSmall",
			'WordWrap', false,
			'Shorten', true,
			'TextHAlign', "center",
			'TextVAlign', "center",
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnMouseButtonDown(self, pos, button)",
			'func', function (self, pos, button)
				if button == "L" then
					local subSubMenuDlg = GetDialog(self):ResolveId("idSubSubContent")
					local subMenu = GetDialog(self):ResolveId("idSubMenu")
					local installedModsList = subMenu and subMenu:ResolveId("idScrollArea")
					local mode = subSubMenuDlg and GetDialogMode(subSubMenuDlg)
					if mode and mode == "tags" then
						subSubMenuDlg:SetMode("empty")
						self:SetisExpanded(false)
						installedModsList:SetMouseScroll(true)
					else
						self:SetisExpanded(true)
						installedModsList:SetMouseScroll(false)
						subSubMenuDlg:SetMode("tags", self)
					end
					
					g_SelectedMod = false
					ObjModified("NewSelectedMod")
					for _, btn in ipairs(installedModsList) do
						if IsKindOf(btn and btn.context, "ModUIEntry") then
							btn:SetSelected(false)
						end
					end
					ObjModified("tags")
					ObjModified("presets")
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnSetRollover(self, rollover)",
			'func', function (self, rollover)
				local subSubMenuDlg = GetDialog(self):ResolveId("idSubSubContent")
				local mode = subSubMenuDlg and GetDialogMode(subSubMenuDlg)
				if mode then
					self:SetisExpanded(mode == "tags")
				end
				
				self.idName:SetTextStyle((rollover or self:GetisExpanded()) and "InventoryToolbarButtonCenter" or "PDABrowserHeader")
				self.idTags:SetTextStyle((rollover or self:GetisExpanded()) and "MMOptionEntryValue" or "PDABrowserNameSmall")
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "SetSelected(self, selected)",
			'func', function (self, selected)
				if GetUIStyleGamepad() then
					self:SetFocus(selected)
				end
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "OnShortcut(self, shortcut, source, ...)",
			'func', function (self, shortcut, source, ...)
				if shortcut == "ButtonA" then
				 	self:OnMouseButtonDown(nil, "L")
				end
			end,
		}),
		}),
	PlaceObj('XTemplateProperty', {
		'id', "isExpanded",
		'Set', function (self, value)
			self.isExpanded = value
		end,
		'Get', function (self)
			return self.isExpanded
		end,
	}),
})

