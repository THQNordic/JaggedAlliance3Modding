-- ========== GENERATED BY XTemplate Editor (Alt-F3) DO NOT EDIT MANUALLY! ==========

PlaceObj('XTemplate', {
	RequireActionSortKeys = true,
	__is_kind_of = "XDialog",
	group = "Zulu",
	id = "GameUpdatesPopup",
	PlaceObj('XTemplateTemplate', {
		'__template', "PopupNotificationBaseTemplate",
	}, {
		PlaceObj('XTemplateFunc', {
			'name', "SetSelectedHint(self, hint)",
			'func', function (self, hint)
				local hintScroll = self.idHintScroll
				if not hint then
					hint = hintScroll.context[#hintScroll.context]
				elseif type(hint) == "string" then
					hint = table.find_value(hintScroll.context, "id", hint)
				end
				
				if not hint then
					self.idText:SetText()
					return
				 end
				
				local selectedWnd = false
				for i, hintWnd in ipairs(hintScroll) do
					if hintWnd.SetStyle then
						local selected = hintWnd.context == hint
						if selected then 
							selectedWnd = hintWnd
							if not next(hintScroll.selection) then
								hintScroll:SetSelection(i)
							end
						end
						hintWnd:SetStyle(selected and "selected" or "default")
					end
				end
				hintScroll:ScrollIntoView(selectedWnd)
				
				AccountStorage.GameUpdatesReadState = AccountStorage.GameUpdatesReadState or {}
				if not AccountStorage.GameUpdatesReadState[hint.id] then
					AccountStorage.GameUpdatesReadState[hint.id] = true
					SaveAccountStorage(5000)
				end
				
				local text = hint.Text	
				local idx = table.find(Presets.GameUpdate.Default, "id", hint.id)
				if ModsLoaded and #ModsLoaded>0  and idx== 1 then
					text = TLookupTag("<GameColorI>")..T(752531448999, "Warning! You have active mods which may not work with this new update. We recommend disabling mods that have not been updated after the release of the patch by their authors.")..Untranslated("</color>").."\n\n\n"..text
				end
				self.idText:SetText(text)
				
				rawset(self, "selected", hint.id)
				self.idToolbar:RebuildActions(self)
			end,
		}),
		PlaceObj('XTemplateFunc', {
			'name', "IsHintRead(self, hint)",
			'func', function (self, hint)
				return IsGameUpdateMsgRead(hint)
			end,
		}),
		PlaceObj('XTemplateAction', {
			'ActionId', "idDisableMods",
			'ActionSortKey', "1000",
			'ActionName', T(492869850365, --[[XTemplate GameUpdatesPopup ActionName]] "Disable Mods"),
			'ActionToolbar', "ActionBarPopupNotification",
			'ActionButtonTemplate', "PDACommonButton",
			'ActionState', function (self, host)
				local idx = table.find(Presets.GameUpdate.Default, "id",host.selected)
				return ModsLoaded and #ModsLoaded>0 and idx==1 and "enabled" or "disabled"
			end,
			'OnAction', function (self, host, source, ...)
				for _, mod in ipairs(ModsLoaded) do
					TurnModOff(mod.id)
				end
				CreateRealTimeThread( function()
					ModsReloadItems(nil, "force_reload")
				end)
				host:Close()
			end,
		}),
		PlaceObj('XTemplateAction', {
			'ActionId', "idPatchNotes",
			'ActionSortKey', "1010",
			'ActionName', T(407892869347, --[[XTemplate GameUpdatesPopup ActionName]] "Patch Notes"),
			'ActionToolbar', "ActionBarPopupNotification",
			'ActionButtonTemplate', "PDACommonButton",
			'ActionState', function (self, host)
				if not host.selected  then
					return "disabled"
				end	
				local hint = GameUpdates[host.selected] 
				return hint and (g_UpdateNotes[hint.id] or g_UpdateNotes["default"]) and "enabled" or "disabled"
			end,
			'OnAction', function (self, host, source, ...)
				local hint = host.selected  and  GameUpdates[host.selected] 
				local url = g_UpdateNotes[hint.id] or g_UpdateNotes["default"]
				OpenUrl(url)
			end,
		}),
		}),
})

